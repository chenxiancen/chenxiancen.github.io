<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>莫留遗憾，莫言如若</title>
  
  <subtitle>来者便是客</subtitle>
  <link href="https://love.moyanruruo.top/atom.xml" rel="self"/>
  
  <link href="https://love.moyanruruo.top/"/>
  <updated>2024-03-13T15:35:38.030Z</updated>
  <id>https://love.moyanruruo.top/</id>
  
  <author>
    <name>莫若MOYANRU</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>测试</title>
    <link href="https://love.moyanruruo.top/posts/9daba997.html"/>
    <id>https://love.moyanruruo.top/posts/9daba997.html</id>
    <published>2024-03-13T15:35:38.030Z</published>
    <updated>2024-03-13T15:35:38.030Z</updated>
    
    <content type="html"><![CDATA[<div align="center" class="aspect-ratio">  <iframe    src="//player.bilibili.com/player.html?aid=530496242&bvid=BV1Uu411b7TT&cid=1181410841&p=1"    scrolling="no"    border="0"    frameborder="no"    framespacing="0"    high_quality="1"    danmaku="1"    allowfullscreen="true"  ></iframe></div>]]></content>
    
    
    <summary type="html">博客测试使用</summary>
    
    
    
    <category term="测试" scheme="https://love.moyanruruo.top/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
  </entry>
  
  <entry>
    <title>H5+CSS3+移动web</title>
    <link href="https://love.moyanruruo.top/posts/68a4e457.html"/>
    <id>https://love.moyanruruo.top/posts/68a4e457.html</id>
    <published>2024-03-12T16:13:54.000Z</published>
    <updated>2024-03-13T15:35:38.030Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Html5-CSS3-移动web"><a href="#Html5-CSS3-移动web" class="headerlink" title="Html5+CSS3+移动web"></a>Html5+CSS3+移动web</h1><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ul><li><p>软件下载地址：</p><a class="tag-Link" target="_blank" href="https://code.visualstudio.com/download">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://api.iowen.cn/favicon/code.visualstudio.com/download.png);"></div>        <div class="tag-link-right">            <div class="tag-link-title">VSCode</div>            <div class="tag-link-sitename">下载地址</div>        </div>        <i class="fa-solid fa-angle-right"></i>    </div>    </a><a class="tag-Link" target="_blank" href="https://www.google.cn/intl/en_uk/chrome/dev/">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://api.iowen.cn/favicon/www.google.cn/intl/en_uk/chrome/dev/.png);"></div>        <div class="tag-link-right">            <div class="tag-link-title">Chrome</div>            <div class="tag-link-sitename">下载地址</div>        </div>        <i class="fa-solid fa-angle-right"></i>    </div>    </a></li></ul><h2 id="VSCode插件"><a href="#VSCode插件" class="headerlink" title="VSCode插件"></a>VSCode插件</h2><blockquote><ol><li>Chinese    界面汉化插件</li><li>open in browser     打开网页插件</li></ol></blockquote><h2 id="VSCode快捷键"><a href="#VSCode快捷键" class="headerlink" title="VSCode快捷键"></a>VSCode快捷键</h2><blockquote><p><code>ctrl</code>+<code>+</code>    字体放大</p><p><code>ctrl</code>+<code>-</code>    字体缩小</p><p><code>Tab</code>    向后缩进</p><p><code>Shift</code>+<code>Tab</code>    向前缩进</p><p><code>Ctrl</code>+<code>/</code>    添加/删除注释</p></blockquote><h2 id="HTML定义"><a href="#HTML定义" class="headerlink" title="HTML定义"></a>HTML定义</h2><blockquote><p>HTML：超文本标记语言——Hyper Text Markup Language</p><ul><li>超文本指的是链接</li><li>标记也叫标签，指的是代码中带有简括包的文本</li></ul></blockquote><h2 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h2><blockquote><p>路径指的是查找文件时，从<mark>起点到终点</mark>经历的路线</p></blockquote><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><h4 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h4><blockquote><p>从<mark>当前文件位置</mark>出发查找目标文件</p><ul><li>windows：从盘符出发</li><li>mac：从根目录（/）出发</li></ul><p>应用场景：友情链接，可以使用网址来获取在线网页的一些图片或者静态资源</p><p>注意：windows默认是\，其它系统是/，建议统一写为/</p></blockquote><h4 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h4><blockquote><p>从<mark>盘符</mark>出发查找目标文件<mark>（主流）</mark></p><ul><li>/：表示进入文件夹</li><li>.：表示当前文件夹，举例./dog.jpg指的是当前文件夹下的dog.jpg文件</li><li>..：表示上一级目录，举例../表示进入上一级文件夹</li></ul></blockquote><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><h3 id="标签属性的使用方法"><a href="#标签属性的使用方法" class="headerlink" title="标签属性的使用方法"></a>标签属性的使用方法</h3><ul><li>写法：属性名=”属性值”</li><li>属性写在<mark>标签尖括号里边，标签名后边</mark>，标签名和属性之间用<mark>空格隔开</mark>，不区分先后顺序</li></ul><h3 id="标签汇总"><a href="#标签汇总" class="headerlink" title="标签汇总"></a>标签汇总</h3><h4 id="双标签"><a href="#双标签" class="headerlink" title="双标签"></a>双标签</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 加粗 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 整个网页 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 网页头部，存放给浏览器看的代码，如css --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 网页主体，网页中的内容 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 网页标题 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 内容一级标题，只能用一次，用来放新闻标题或者网页logo --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 内容二级标题 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 内容三级标题 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 内容四级标题 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 内容五级标题 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h5</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h5</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 内容六级标题 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h6</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h6</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 段落标签 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 倾斜 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 下划线 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>u</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>u</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 删除线 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>del</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>del</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>s</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>s</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- --></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="单标签"><a href="#单标签" class="headerlink" title="单标签"></a>单标签</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 换行 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 水平线 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 图像标签 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>图像路径<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="标签语法"><a href="#标签语法" class="headerlink" title="标签语法"></a>标签语法</h3><blockquote><ul><li><p>标签成对出现，中间包裹内容</p></li><li><p>&lt;&gt;里边放英文字母（标签名）</p></li><li><p>结束标签比开始标签多/</p></li><li><p>拓展</p><ol><li><p>双标签：成对出现的标签</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>但标签：只有开始标签。没有结束标签</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span>#换行<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>#水平线<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol></li></ul></blockquote><h3 id="标签关系"><a href="#标签关系" class="headerlink" title="标签关系"></a>标签关系</h3><blockquote><p>作用：明确代码的书写位置</p><p>分类：</p><ul><li><p>父子关系（嵌套关系）</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 此处html是父标签head是子标签 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>兄弟关系（并列关系）</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 此处head标签和body标签是并列关系 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><mark>个人理解(仅代表个人观点不代表集体立场)：可以通过代码中的缩进不难看出，相同缩进并且是被同一个标签所包裹的标签是并列关系，父子关系的标签必然是两个标签其中一个被另外一个完全包裹的</mark></p></blockquote><h3 id="段落标签"><a href="#段落标签" class="headerlink" title="段落标签"></a>段落标签</h3><blockquote><p>标签名：p（双标签）</p><p>显示特点：</p><ul><li>独占一行</li><li>段落之间存在间隙</li></ul></blockquote><h3 id="文本格式化标签"><a href="#文本格式化标签" class="headerlink" title="文本格式化标签"></a>文本格式化标签</h3><blockquote><p>作用：为文本台南佳特殊格式，以突出重点。常见的文本格式：加粗、倾斜、下划线、删除线等。</p><p><strong>加粗</strong>：</p><ul><li>标签名：strong / b</li></ul><p><em>倾斜</em>：</p><ul><li>标签名：em / i</li></ul><p><ins>下划线</ins>：</p><ul><li>标签名：ins / u</li></ul><p><del>删除线</del>：</p><ul><li>del / s</li></ul><p><mark>注意：strong、em、ins、del、自带强调作用，推荐使用</mark></p></blockquote><h3 id="图像标签"><a href="#图像标签" class="headerlink" title="图像标签"></a>图像标签</h3><blockquote><p>标签名：img（单标签）</p><p>作用：在网页中插入图片</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>图片路径<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>属性(<a href="#标签属性的使用方法">属性使用方法</a>)：</p><ul><li>alt：替换文本，当图片无法显示的时候显示的文字</li><li>title：提示文本，鼠标悬停在图片时显示的文字</li><li>width：图片宽度，值为数字，没有单位，一般写在css中</li><li>height：图片高度，只为数字，没有单位，一般写在css中</li></ul><p>注意：src用于指定<mark>图像的位置和名称</mark>，是图像标签的<mark>必须属性</mark></p><p>拓展：当src路径以<mark>./</mark>开头，VSCode有提示功能</p></blockquote><h2 id="HTML基本骨架"><a href="#HTML基本骨架" class="headerlink" title="HTML基本骨架"></a>HTML基本骨架</h2><blockquote><p>html基本归家如下所示</p></blockquote><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- html是整个网页 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 网页头部，存放给浏览器看的代码，如css --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 网页标题 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>网页标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 网页主题，网页中的内容 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        网页主题    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="vscode快速生成基本骨架"><a href="#vscode快速生成基本骨架" class="headerlink" title="vscode快速生成基本骨架"></a>vscode快速生成基本骨架</h3><blockquote><p>创建html文件，在文件中输入<mark>英文的感叹号(!)</mark>然后<mark>回车或者按<code>Tab</code>键</mark></p></blockquote>]]></content>
    
    
    <summary type="html">H5+css+移动web</summary>
    
    
    
    <category term="技术" scheme="https://love.moyanruruo.top/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>golang</title>
    <link href="https://love.moyanruruo.top/posts/af1c25a3.html"/>
    <id>https://love.moyanruruo.top/posts/af1c25a3.html</id>
    <published>2024-03-01T11:58:54.000Z</published>
    <updated>2024-03-13T15:35:38.030Z</updated>
    
    <content type="html"><![CDATA[<h1 id="golang"><a href="#golang" class="headerlink" title="golang"></a>golang</h1><blockquote><p>go语言特点：c语言编译执行方式以及弱化指针+python</p><p>文章中的示例代码可直接复制到自己的编辑器中运行</p></blockquote><h2 id="Dos基础命令"><a href="#Dos基础命令" class="headerlink" title="Dos基础命令"></a>Dos基础命令</h2><h3 id="目录操作"><a href="#目录操作" class="headerlink" title="目录操作"></a>目录操作</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看当前路径下文件</span><span class="token function">dir</span><span class="token comment">#切换到其他盘</span><span class="token builtin class-name">cd</span> /d d:<span class="token comment">#切换到当前盘的其他目录</span><span class="token builtin class-name">cd</span> 目录名<span class="token punctuation">\</span>目录名<span class="token comment">#相对路径</span><span class="token builtin class-name">cd</span> f:<span class="token punctuation">\</span>目录名<span class="token punctuation">\</span>目录名<span class="token comment">#绝对路径</span><span class="token comment">#切换到上一级</span><span class="token builtin class-name">cd</span> <span class="token punctuation">..</span><span class="token comment">#切换到根目录</span><span class="token builtin class-name">cd</span> <span class="token punctuation">\</span><span class="token comment">#新建目录</span>md 目录名及其创建的路径<span class="token comment">#新建多个目录</span>md 目录名及路径 目录名及其路径<span class="token comment">#删除空目录</span>rd 需要删除的目录路径<span class="token comment">#删除目录以及下面的子目录和文件，不带询问</span>rd /q/s 需要删除的目录路径<span class="token comment">#删除目录以及下面的子目录和文件，带询问</span>rd /s 需要删除的目录路径<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#新建或追加内容到文件</span><span class="token builtin class-name">echo</span> 文件内容 <span class="token operator">></span> 文件路径以及新建或者想要追加内容的文件名<span class="token comment">#复制文件</span>copy 原文件路径 目标文件路径（可进行文件的重命名）<span class="token comment">#移动文件</span>move 原文件路径 目标文件路径（可进行文件的重命名）<span class="token comment">#删除指定文件</span>del 要删除的文件路径<span class="token comment">#删除所有.txt后缀的文件</span>del *.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="其他指令"><a href="#其他指令" class="headerlink" title="其他指令"></a>其他指令</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#清屏</span>cls<span class="token comment">#退出dos</span><span class="token builtin class-name">exit</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="其他知识点"><a href="#其他知识点" class="headerlink" title="其他知识点"></a>其他知识点</h2><h3 id="vscode快捷键"><a href="#vscode快捷键" class="headerlink" title="vscode快捷键"></a>vscode快捷键</h3><blockquote><p>alt+shift+f：全局整理格式</p><p>alt+shift+↓：复制一行</p></blockquote><h3 id="字节"><a href="#字节" class="headerlink" title="字节"></a>字节</h3><blockquote><p>一个字节8位2进制</p></blockquote><h3 id="程序种-的使用"><a href="#程序种-的使用" class="headerlink" title="程序种+的使用"></a>程序种<code>+</code>的使用</h3><blockquote><ol><li>当左右两边都是数值型时，则做加法运算</li><li>当左右两边都是字符串，则时将其拼接</li></ol></blockquote><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//此处的输出结果为80</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">30</span> <span class="token operator">+</span> <span class="token number">50</span><span class="token punctuation">)</span>    <span class="token comment">//此处的输出结果为hello world</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"hello "</span> <span class="token operator">+</span> <span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Unicode码"><a href="#Unicode码" class="headerlink" title="Unicode码"></a>Unicode码</h3><blockquote><p><a href="https://upimg.baike.so.com/doc/4443890-4652181.html">Unicode</a>只有一个字符集，中文、日文、韩文三种文字一齐占用了Unicode中0x3000到0x9FFF的部分。Unicode目前普遍采用的是UCS-2标准，它用两个字节来编码一个字符， 比如汉字”经”的编码是0x7ECF。因为字符码一般用十六进制来表示，为了与十进制区分，十六进制以0x开头，0x7ECF转换成十进制即是32463，UCS-2用两个字节来编码字符，两个字节就是16位二进制， 2的16次方等于65536，所以UCS-2最多能编码65536个字符。 编码从0到127的字符与ASCII编码的字符一样，比如字母”a”的Unicode编码是0x0061，对应的十进制是97，而”a”的ASCII编码是0x61，对应的十进制也是97,。实际上Unicode对汉字的支持与编码并不怎么好，这也是没办法的。简体汉字和繁体汉字加在一起总共有六七万个，而UCS-2最多只能表示65536个字符，所以Unicode只能通过排除一些几乎不用的汉字的方法以能够表达其余常用汉字，好在常用的简体汉字只有七千多个。为了能表示所有汉字，Unicode也有UCS-4规范，就是用 4个字节来编码字符，在这种规范下，大部分来自不同国家和地区的可读字符都可以被表达出来。</p></blockquote><h2 id="Golang官方变成指南"><a href="#Golang官方变成指南" class="headerlink" title="Golang官方变成指南"></a>Golang官方变成指南</h2><blockquote><p>网页端指南网站：</p><p><a href="https://go.dev/tour/welcome/1">围棋之旅 (go.dev)</a></p><p><mark>(不推荐)</mark>API查询官方网址（API：应用程序编程接口，就是我们Go的包的各个函数）</p><p><a href="https://pkg.go.dev/">Go Packages - Go Packages</a></p><p><mark>(推荐)</mark>Golang标准库API文档(国内下载，访问速度比官方要快)</p><p><a href="https://studygolang.com/pkgdoc">Go语言标准库文档中文版</a></p><p>调用包中的方法：包名.包中的函数名(需要传入的参数)</p></blockquote><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 引入包：文件所在包</span><span class="token keyword">package</span> main<span class="token comment">//导入方法使用的包</span><span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//使用fmt中的Println函数</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"hello,world!"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="编译与运行"><a href="#编译与运行" class="headerlink" title="编译与运行"></a>编译与运行</h2><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><blockquote><p>编译：主要是将编写的代码编译为机器能识别的二进制码文件，在Windows上会生成一个.exe后缀的文件，在Linux下会生成一个绿色的可执行文件，若存在错误则会爆出有问题的行。</p></blockquote><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><blockquote><p>运行的两种方式：</p><ul><li>直接运行生成的可执行Go程序，比如hello.exe</li><li>通过运行工具fo run队员吗进行运行</li></ul></blockquote><h2 id="常见问题及解决方法"><a href="#常见问题及解决方法" class="headerlink" title="常见问题及解决方法"></a>常见问题及解决方法</h2><h3 id="找不到文件"><a href="#找不到文件" class="headerlink" title="找不到文件"></a>找不到文件</h3><blockquote><p>问题描述：执行代码时报错：The system cannot find the file specified.</p><p>翻译出来为：系统找不到指定的文件</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/chenxiancen/ImgPicGo/blogimg/go_%E6%89%BE%E4%B8%8D%E5%88%B0%E6%96%87%E4%BB%B6%E6%8A%A5%E9%94%99.png" alt="image-20240305110805069"></p><blockquote><p>解决发放：源文件名不存在或者写错，或者当前路径错误</p></blockquote><h3 id="语法错误"><a href="#语法错误" class="headerlink" title="语法错误"></a>语法错误</h3><blockquote><p>问题描述：提示语法错误例子：</p><p><code>#</code> command-line-arguments<br>main\hello.go:9:6: undefined: fmt.Print1n</p><p>翻译为：</p><p><code>#</code>命令行参数</p><p>main\hello.go:9:6:未定义：fmt.打印1n</p><p>其中第二行表示：<mark>出错的文件路径</mark>：<mark>行数</mark>：列：<mark>出现的问题</mark></p><p>主要看的为我上边高亮的内容</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/chenxiancen/ImgPicGo/blogimg/go_%E8%AF%AD%E6%B3%95%E9%94%99%E8%AF%AF%E6%8A%A5%E9%94%99.png" alt="image-20240305111533934"></p><blockquote><p>解决方法：排查是否出现语法错误，比如拼错单词，大小写，大括号，引号，或者使用了中文输入法等</p></blockquote><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><blockquote><p>介绍：主要用来对方法类异界代码进行描述，便于后期维护和他人阅读</p><p>分类：</p><ul><li>行注释（单行注释）</li><li>块注释（多行注释）</li></ul><p>注意：注释的内容是不会被程序编译的，对程序无影响</p></blockquote><h3 id="行注释"><a href="#行注释" class="headerlink" title="行注释"></a>行注释</h3><blockquote><p>使用方法：// + 注释内容</p><p>推荐用来注释整个方法和语句</p></blockquote><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 引入包：文件所在包</span><span class="token keyword">package</span> main<span class="token comment">//导入方法使用的包</span><span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"hello,world!"</span><span class="token punctuation">)</span><span class="token comment">//输出hello,world!,需要注意的是需要导入对应的包，否则编译无法通过</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="块注释（多行注释）"><a href="#块注释（多行注释）" class="headerlink" title="块注释（多行注释）"></a>块注释（多行注释）</h3><blockquote><p>使用方法：/<em> </em>/</p><p><mark>注意：块注释里不允许有块注释嵌套</mark></p></blockquote><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">/*多行注释*/</span><span class="token comment">// 引入包：文件所在包</span><span class="token keyword">package</span> main<span class="token comment">//导入方法使用的包</span><span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"hello,world!"</span><span class="token punctuation">)</span><span class="token comment">//输出hello,world!,需要注意的是需要导入对应的包，否则编译无法通过</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="代码风格规范"><a href="#代码风格规范" class="headerlink" title="代码风格规范"></a>代码风格规范</h2><h3 id="正确的缩进和空白"><a href="#正确的缩进和空白" class="headerlink" title="正确的缩进和空白"></a>正确的缩进和空白</h3><blockquote><ol><li>使用<code>tab</code>操作，实现整体向右缩进，默认整体向右边移动，有时候用<code>shift</code>+<code>tab</code>整体左移</li><li>或者使用gofmt来进行格式化<mark>（vscode中使用<code>alt</code>+<code>shift</code>+<code>f</code>实现）终端中通过fofmt -w +go文件路径实现</mark></li><li>运算符两边习惯性各加一个空格。比如：2 + 3 * 5</li></ol></blockquote><h3 id="代码风格"><a href="#代码风格" class="headerlink" title="代码风格"></a>代码风格</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//错误示范</span><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//Go语言不能将方法后边的大括号另起一行</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"hello,world"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//正确示范</span><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"hello,world"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="go语言特点"><a href="#go语言特点" class="headerlink" title="go语言特点"></a>go语言特点</h2><h3 id="弱化的指针"><a href="#弱化的指针" class="headerlink" title="弱化的指针"></a>弱化的指针</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token comment">//此处num为变量</span><span class="token keyword">func</span> <span class="token function">test</span><span class="token punctuation">(</span>num <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    num <span class="token operator">=</span><span class="token number">20</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"num="</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//此处*num为指针</span><span class="token keyword">func</span> <span class="token function">test2</span><span class="token punctuation">(</span>num2 <span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//&amp;num表述输出num2指针的内存地址，num2表示输出指针变量的值，*num2表示输出num2保存的内存地址对应的值</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"&amp;num2="</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>num2<span class="token punctuation">,</span> <span class="token string">"num2="</span><span class="token punctuation">,</span> num2<span class="token punctuation">,</span> <span class="token string">"*num2"</span><span class="token punctuation">,</span> <span class="token operator">*</span>num2<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">30</span> <span class="token operator">+</span> <span class="token number">50</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"hello "</span> <span class="token operator">+</span> <span class="token string">"world"</span><span class="token punctuation">)</span><span class="token comment">//定义指针变量</span><span class="token keyword">var</span> i <span class="token operator">*</span><span class="token builtin">int</span><span class="token comment">//定义变量n</span>n <span class="token operator">:=</span> <span class="token number">20</span><span class="token comment">//给指针变量赋值为n的内存地址</span>i <span class="token operator">=</span> <span class="token operator">&amp;</span>n<span class="token comment">//调用test函数</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token comment">//调用test2函数</span><span class="token function">test2</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="包的引入"><a href="#包的引入" class="headerlink" title="包的引入"></a>包的引入</h3><blockquote><p>引入包的概念，用于组织架构，Go语言的一个文件都要<mark>归属</mark>于一个包，而不能单独存在</p><p><mark>注意：此处的包主要是当前.go后缀文件所在的文件夹</mark></p></blockquote><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//归属的包的生命</span><span class="token keyword">package</span> 归属的包的名字<span class="token comment">//举例:归属于main的go文件</span><span class="token keyword">package</span> main<span class="token comment">//引入包</span><span class="token keyword">import</span> <span class="token string">"引入的包的名称"</span><span class="token comment">//举例</span><span class="token keyword">import</span> <span class="token string">"fmt"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="行长约定"><a href="#行长约定" class="headerlink" title="行长约定"></a>行长约定</h3><blockquote><p>一行最长不超过80个字符，超过的请使用换行展示，尽量保持格式优雅</p></blockquote><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//换行举例,使用goland编辑器的话goland会自动帮你加上</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"hellehellehellehellehe"</span><span class="token punctuation">,</span>            <span class="token string">"llehellehellehellehellehelle"</span><span class="token punctuation">,</span>            <span class="token string">"hellehellehellehellehellehellehelle"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h3><blockquote><p>垃圾回收机制，内存自动回收，不需要开发人员管理</p></blockquote><h3 id="天然并发（重要特点）"><a href="#天然并发（重要特点）" class="headerlink" title="天然并发（重要特点）"></a>天然并发（重要特点）</h3><blockquote><ol><li>从语言层面支持并发，实现简单</li><li>goroutime，轻量级线程，可实现大并发处理，高效利用多核</li><li>基于CPS并发模型实现</li></ol></blockquote><h3 id="管道通讯机制"><a href="#管道通讯机制" class="headerlink" title="管道通讯机制"></a>管道通讯机制</h3><blockquote><p>吸收管道通讯机制，形成Go语言特有的管道channel，通过管道channel，可以实现不通goroute质检的相互通信</p></blockquote><h3 id="函数返回多个值"><a href="#函数返回多个值" class="headerlink" title="函数返回多个值"></a>函数返回多个值</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//同时返回和与差，(n1 int, n2 int):此处为传参,(int int):此处为返回值</span><span class="token keyword">func</span> <span class="token function">getSumAndSub</span><span class="token punctuation">(</span>n1 <span class="token builtin">int</span><span class="token punctuation">,</span> n2 <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    sum <span class="token operator">:=</span> n1<span class="token operator">+</span>n2<span class="token comment">//go语句之后不需要写分号</span>    sub <span class="token operator">:=</span> n1<span class="token operator">-</span>n2    <span class="token keyword">return</span> sum <span class="token punctuation">,</span> sub<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="切片slice、延时执行defer"><a href="#切片slice、延时执行defer" class="headerlink" title="切片slice、延时执行defer"></a>切片slice、延时执行defer</h3><blockquote><p>切片类似于Java中的集合</p><p>延时执行指的是所有代码执行完以后在执行defer中的代码</p></blockquote><h2 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h2><blockquote><ol><li>VSCode：个人看法(需要安装各种插件)</li><li>Sublime Text: 个人看法(适合用来查看单独的go文件)</li><li>Vim：同上</li><li>Emacs：即使编辑器又可以用在做集成开发环境</li><li>eclipse：开发编辑器，但是需要安装go插件并进行配置</li><li>goland：开发编辑器，教程视频介绍，但是是JetBrain公司的全家桶产品，相对来说更推荐这个<mark>(个人推荐)</mark></li></ol></blockquote><h2 id="VSCode的下载安装以及使用"><a href="#VSCode的下载安装以及使用" class="headerlink" title="VSCode的下载安装以及使用"></a>VSCode的下载安装以及使用</h2><h3 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h3><blockquote><p>下载地址:<a href="https://code.visualstudio.com/download">VSCode</a></p></blockquote><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="创建工作区"><a href="#创建工作区" class="headerlink" title="创建工作区"></a>创建工作区</h4><ul><li><p>点击文件-&gt;打开文件夹</p><p><img src="https://cdn.jsdelivr.net/gh/chenxiancen/ImgPicGo/blogimg/vscode%E5%88%9B%E5%BB%BA%E5%B7%A5%E4%BD%9C%E5%8C%BA.png" alt="image-20240304130819780"></p></li><li><p>创建并选择文件夹作为工作目录</p><p><img src="https://cdn.jsdelivr.net/gh/chenxiancen/ImgPicGo/blogimg/vscode%E9%80%89%E6%8B%A9%E5%B7%A5%E4%BD%9C%E7%9B%AE%E5%BD%95.png" alt="image-20240304131439613"></p></li></ul><h2 id="VSCode搭建go语言环境"><a href="#VSCode搭建go语言环境" class="headerlink" title="VSCode搭建go语言环境"></a>VSCode搭建go语言环境</h2><h3 id="下载安装SDK"><a href="#下载安装SDK" class="headerlink" title="下载安装SDK"></a>下载安装SDK</h3><blockquote><p>SDK：软件开发工具包，主要是提供给开发人员使用的，其中包含了对应开发语言的工具包</p><p>下载地址：</p><p><a href="https://go.p2hp.com/">Go中文网 Go语言中文网 golang (p2hp.com)</a></p><p><a href="https://go.dev/">Go官网</a></p><p><mark>傻瓜式安装即可，安装路径不要有中文</mark></p></blockquote><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><blockquote><p>右键此电脑-&gt;属性-&gt;高级系统设置-&gt;环境变量-&gt;新建</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/chenxiancen/ImgPicGo/blogimg/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE%E7%95%8C%E9%9D%A2.png" alt="image-20240304150032887"></p><blockquote><p>新建:GOROOT</p><ul><li>变量名：GOROOT</li><li>变量值：SDK安装路径</li></ul></blockquote><p><img src="https://cdn.jsdelivr.net/gh/chenxiancen/ImgPicGo/blogimg/GOROOT.png" alt="image-20240304150322520"></p><blockquote><p>path添加SDK的bin路径如下</p><p>%GOROOT%\bin</p><p><mark>如果使用上边配置验证不通过则使用绝对路径</mark></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/chenxiancen/ImgPicGo/blogimg/go_path%E9%85%8D%E7%BD%AE.png" alt="image-20240304151424006"></p><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><blockquote><p>桌面开启终端输入go version显示版本即表示环境变量配置成功如下图所示</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/chenxiancen/ImgPicGo/blogimg/go%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%AA%8C%E8%AF%81.png" alt="image-20240304151941136"></p><h2 id="入门程序Hello-World"><a href="#入门程序Hello-World" class="headerlink" title="入门程序Hello World"></a>入门程序Hello World</h2><blockquote><p>开发工具：VSCode</p></blockquote><ul><li><p>创建main文件夹以及hello.go文件</p><p><img src="https://cdn.jsdelivr.net/gh/chenxiancen/ImgPicGo/blogimg/firstGo.png" alt="image-20240304153726524"></p></li><li><p>安装编译运行的插件</p><p><img src="https://cdn.jsdelivr.net/gh/chenxiancen/ImgPicGo/blogimg/vscode_go%E7%BC%96%E8%AF%91%E8%BF%90%E8%A1%8C%E6%8F%92%E4%BB%B6.png" alt="image-20240304154757867"></p></li><li><p>编写代码</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 引入包：文件所在包</span><span class="token keyword">package</span> main<span class="token comment">//导入方法使用的包</span><span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//输出hello,world!,需要注意的是需要导入对应的包，否则编译无法通过</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"hello,world!"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>保存-&gt;右键点击Run Code运行代码</p><blockquote><p>保存后确保VSCode文件名后边没有白色点才算保存完成</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/chenxiancen/ImgPicGo/blogimg/firstGo_run.png" alt="image-20240304155404196"></p></li></ul><h2 id="Golang执行流程分析"><a href="#Golang执行流程分析" class="headerlink" title="Golang执行流程分析"></a>Golang执行流程分析</h2><blockquote><p>两种执行流程：</p><ul><li>.go文件先使用go build进行编译生成.exe或可执行文件然后运行.exe文件或可执行文件进行运行</li><li>go run:编译运行一步解决</li></ul><blockquote><p>两种执行流程区别：</p><ul><li>如果是先编译在运行生成的.exe文件即使将.exe文件移动到一台没有环境的电脑上仍然可以运行，使用go run命令则不可以</li><li>使用go build编译时，编译器会将程序运行所需要的库文件包含在可执行文件中，所以可执行文件变大了很多</li></ul></blockquote><p>执行流程图如下</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/chenxiancen/ImgPicGo/blogimg/Golang%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="image-20240304161150960"></p><h2 id="Go语法注意点"><a href="#Go语法注意点" class="headerlink" title="Go语法注意点"></a>Go语法注意点</h2><blockquote><ol><li>Go源文件以“go”为扩展名</li><li>Go应用程序的执行入口时main()方法</li><li>Go语言严格<mark>区分大小写</mark></li><li>Go方法由一条条语句构成，每个<mark>语句后不需要分号</mark>（Go语言会在每行后自动加分号），这也体现出Golang的简洁性</li><li>Go编译器是一行行进行编译的，因此我们一行就写一条语句，<mark>不能把多条语句写在同一行</mark>，否则会报错</li><li>go语言<mark>定义的变量</mark>或者<mark>import的包</mark>如果没有使用到，代码不能编译通过</li><li>大括号成对出现，缺一不可</li></ol></blockquote><h2 id="Go转义字符"><a href="#Go转义字符" class="headerlink" title="Go转义字符"></a>Go转义字符</h2><blockquote><p>\t：一个制表符</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/chenxiancen/ImgPicGo/blogimg/%E5%88%B6%E8%A1%A8%E7%AC%A6:%5Ct.png" alt="image-20240304171524947"></p><blockquote><p>\n：换行符</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/chenxiancen/ImgPicGo/blogimg/%E6%8D%A2%E8%A1%8C%E7%AC%A6:%5Cn.png" alt="image-20240304171959121"></p><blockquote><p>\\：一个\</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/chenxiancen/ImgPicGo/blogimg/%E8%BD%AC%E4%B9%89%E7%AC%A6%5C%5C%E5%AE%9E%E4%BE%8B.png" alt="image-20240304172254979"></p><blockquote><p>\“：一个“</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/chenxiancen/ImgPicGo/blogimg/%E4%B8%80%E4%B8%AA%E2%80%9D%E8%BD%AC%E4%B9%89%E7%AC%A6%E5%AE%9E%E4%BE%8B.png" alt="image-20240304172546322"></p><blockquote><p>\r：一个回车根据版本可能是替换也可能是换行</p><p>我的是1.21.5版本效果为换行</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/chenxiancen/ImgPicGo/blogimg/%5Cr%E8%BD%AC%E4%B9%89%E7%AC%A6%E5%AE%9E%E4%BE%8B.png" alt="image-20240304174224314"></p><h2 id="数据类型以及默认值"><a href="#数据类型以及默认值" class="headerlink" title="数据类型以及默认值"></a>数据类型以及默认值</h2><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><blockquote><p><a href="#字节">字节相关</a></p></blockquote><h4 id="数值型"><a href="#数值型" class="headerlink" title="数值型"></a>数值型</h4><h5 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h5><blockquote><ul><li><p>默认值：0</p><p><mark>uint类型为无符号类型</mark></p></li><li><p>分类：</p><ul><li>int    范围：32位系统-2<sup>31</sup>~2<sup>31</sup>-1，64位系统-2<sup>63</sup>~2<sup>63</sup>-1    存储空间：32位系统4字节，64位系统8字节</li><li>int8    范围：-128~127    存储空间：1字节</li><li>int16    范围：-2<sup>15</sup>~2<sup>15</sup>-1    存储空间：2字节</li><li>int32    范围：-2<sup>31</sup>~2<sup>31</sup>-1    存储空间：4字节</li><li>int64    范围：-2<sup>63</sup>~2<sup>63</sup>-1    存储空间：8字节</li><li>uint    范围：32位系统0~2<sup>32</sup>-1，64位系统0<code>~</code>2<sup>64</sup>-1    存储空间：32位系统4字节，64位系统8字节</li><li>uint8    范围：0~255    存储空间：1字节</li><li>uint16    范围：0~2<sup>16</sup>-1    存储空间：2字节</li><li>uint32    范围：0~2<sup>32</sup>-1    存储空间：4字节</li><li>uint64    范围：0~2<sup>64</sup>-1    存储空间：8字节</li><li>byte：与uint8等价，当要存储字符时选用byte</li><li>rune：与int32一样，表示一个<a href="#Unicode码">Unicode码</a>，<mark>一般用来存储汉字</mark></li></ul></li><li><p>使用细节：</p><ol><li><p>在程序中查看某个变量的字节大小和数据类型</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main   <span class="token comment">//导入包的方法建议使用这种</span><span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"unsafe"</span><span class="token punctuation">)</span>   <span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">//查看某个变量的占用字节和数据类型</span><span class="token keyword">var</span> n <span class="token builtin">int64</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token comment">//使用fmt.Printf()用来做格式化输出，%T用来输出类型，%d用来输出占用字节，使用unsafe包下的Sizeof函数来获取变量占用字节数大小</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"n的类型 %Tn占用的字节数是 %d"</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span><span class="token function">Sizeof</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Golang程序中整型变量在使用时，遵守报销不报答原则，即：在保证程序正常运行下，尽量使用占用空间小的数据类型。<mark>比如想要存储的数据范围在0-255那便使用unit8类型来保存，没必要定义更大的变量</mark></p></li><li><p>bit：计算机中的最小存储单位。Byte：计算机中基本存储单元。1byte=8bit</p></li></ol></li></ul></blockquote><h5 id="浮点类型-小数类型"><a href="#浮点类型-小数类型" class="headerlink" title="浮点类型/小数类型"></a>浮点类型/小数类型</h5><blockquote><p>默认值：0</p><p>简单说明：</p><ol><li><p>浮点数=符号位+指数位+尾数为</p></li><li><p>尾数部分可能丢失，造成经度损失。</p>   <pre class="line-numbers language-go" data-language="go"><code class="language-go"> <span class="token keyword">package</span> main <span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span> <span class="token punctuation">)</span> <span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">var</span> num1 <span class="token builtin">float32</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">123.0000901</span> <span class="token keyword">var</span> num2 <span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">123.0000901</span> <span class="token comment">//此处的输出位：num1= -123.00009 num2= -123.0000901</span> <span class="token comment">//从输出可以看出num1会有精度丢失</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"num1="</span><span class="token punctuation">,</span> num1<span class="token punctuation">,</span> <span class="token string">"num2="</span><span class="token punctuation">,</span> num2<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>浮点型的存储分为三部分：符号位+指数位+尾数位，在存储过程中精度可能丢失</p></li></ol><p>分类：</p><p>float32    范围：-3.403E38~3.403E38    存储空间：4字节</p><p>float64    范围：-1.798E308~1.798E308    存储空间：8字节</p><p>使用细节：</p><ol><li><p>Golang浮点类型有固定的范围和字段长度，不受具体的操作系统影响</p></li><li><p>Golang的浮点型默认声明位float64</p></li><li><p>浮点型常量两种表现形式：</p><p>十进制数形式：如5.12，.512（.512输出时是0.512，必须有小数点）</p><p>科学计数法形式：如5.1234<mark>e</mark>2 = 5.1234*10的2次方    5.1234<mark>E-</mark>2 = 5.12/10的2次方</p></li><li><p>通常情况下，应该使用float64，因为它比float32更精确。[开发中，推荐使用float64]</p></li></ol></blockquote><h4 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h4><blockquote><p>没有专门的字符型，使用byte来保存单个字母字符，可以保存的范围是[0-1,a-z,A-Z..]，若<mark>保存的字符对应码值大于255</mark>，这时推荐使用<mark>rune</mark>和int类型保存,</p><p>默认值：””</p></blockquote><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> c1 <span class="token builtin">byte</span><span class="token keyword">var</span> c2 <span class="token builtin">byte</span> <span class="token operator">=</span> <span class="token char">'a'</span><span class="token keyword">var</span> c3 <span class="token builtin">byte</span> <span class="token operator">=</span> <span class="token char">'0'</span><span class="token comment">/*var c4 byte = '陈'前边的注释符号会提示溢出报错，单个汉字的值已经超出byte类型所能存储的最大数据以陈为示例，他的ASCII码值为38472，而byte所能存储的最大范围为0~255，因此无法进行保存*/</span>    <span class="token comment">//var c4 byte = '陈'</span><span class="token comment">//当个汉字字符推荐使用rune来保存(推荐)</span><span class="token keyword">var</span> c4 <span class="token builtin">rune</span> <span class="token operator">=</span> <span class="token char">'陈'</span><span class="token keyword">var</span> c5 <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token char">'莹'</span><span class="token comment">/*直接输出：直接输出时输出的值为ASCII码值*/</span><span class="token comment">//输出结果：默认值为0</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"c1="</span><span class="token punctuation">,</span> c1<span class="token punctuation">)</span><span class="token comment">//输出结果：97</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"c2="</span><span class="token punctuation">,</span> c2<span class="token punctuation">)</span><span class="token comment">//输出结果：48</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"c3="</span><span class="token punctuation">,</span> c3<span class="token punctuation">)</span><span class="token comment">//输出结果：38472</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"c4="</span><span class="token punctuation">,</span> c4<span class="token punctuation">)</span><span class="token comment">//输出结果：33721</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"c5="</span><span class="token punctuation">,</span> c5<span class="token punctuation">)</span><span class="token comment">/*如果想要直接输出变量的赋值，不输出ASCII码值则使用格式话输出Printf,下边代码中的\n是用来换行的转义符*/</span><span class="token comment">//输出结果：默认值null</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"c1=%c\n"</span><span class="token punctuation">,</span> c1<span class="token punctuation">)</span><span class="token comment">//输出结果：a</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"c2=%c\n"</span><span class="token punctuation">,</span> c2<span class="token punctuation">)</span><span class="token comment">//输出结果：0</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"c3=%c\n"</span><span class="token punctuation">,</span> c3<span class="token punctuation">)</span><span class="token comment">//输出结果：c4=陈,c4对应的码值=38472</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"c4=%c,c4对应的码值=%d\n"</span><span class="token punctuation">,</span>c4<span class="token punctuation">,</span>c4<span class="token punctuation">)</span><span class="token comment">//c5=莹,c5对应的码值=33721</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"c5=%c,c5对应的码值=%d"</span><span class="token punctuation">,</span>c5<span class="token punctuation">,</span>c5<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ul><li><p>使用细节：</p><ol><li><p>字符常量是用单引号括起来的单个字符。如：var c1 byte = ‘a’    var c2 int = ‘中’    var c3 byte = ‘9’</p></li><li><p>Go中允许使用转义字符’\‘来将其后的字符转变为特殊字符型常量。例如：var c3 char = ‘\n’其中\n表示换行符</p></li><li><p>Go语言的字符使用UTF-8编码<mark>（英文字母1个字节，汉字3个字节）</mark><a href="http://www.mytju.com/classcode/tools/encode_utf8.asp">查看字符编码（UTF-8） (mytju.com)</a></p></li><li><p>在Go中，字符的本质是一个整数，直接输出时，是该字符对应的UTF-8编码的码值</p></li><li><p>可以直接给某个变量赋一个数字，然后按格式化输出是%c，会输出该数字对应的unicode字符</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> num1 <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">21271</span><span class="token comment">//输出结果：num1=北,num1对应码值=21271</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"num1=%c,num1对应码值=%d"</span><span class="token punctuation">,</span> num1 <span class="token punctuation">,</span>num1<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>字符类型是可以进行运算的，相当于一个整数，因为它都对应有Unicode码</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> num1 <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">21271</span><span class="token keyword">var</span> num2 <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">55</span><span class="token keyword">var</span> num3 <span class="token builtin">int</span> <span class="token operator">=</span> num1 <span class="token operator">+</span> num2<span class="token comment">//输出结果：num3=华,num3对应码值=21326</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"num3=%c,num3对应码值=%d"</span><span class="token punctuation">,</span> num3 <span class="token punctuation">,</span>num3<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ul><ul><li><p>字符类型本质探讨：</p><ol><li><p>字符型存储到计算机中，需要将字符对应的码值（整数）找出来</p><p>存储：字符——&gt;对应码值——&gt;二进制——&gt;存储</p><p>读取：二进制——&gt;码值——&gt;字符——&gt;读取</p></li><li><p>字符和码值的对应关系是通过字符编码表决定的（是规定好）</p></li><li><p>Go语言的编码都统一成了utf-8,和其他的变成语言来说。非常的方便，很统一，在也没有编码的困扰</p></li></ol></li></ul></blockquote><h4 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h4><blockquote><ul><li><p>默认值：false</p></li><li><p>基本介绍：(主要用来表示真假判定)</p><ol><li><p>布尔类型也叫bool类型，bool类型<mark>只允许</mark>取值true和false</p></li><li><p>bool类型只占有1个字节</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"unsafe"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token boolean">false</span><span class="token comment">//输出结果：b= false b的占用空间大小为： 1 字节</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"b="</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token string">"b的占用空间大小为："</span><span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span><span class="token function">Sizeof</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"字节"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>boolean类型适于逻辑运算，一般用于程序流程控制</p><p>if条件控制语句</p><p>for循环控制语句</p></li></ol></li></ul></blockquote><h4 id="字符串-String"><a href="#字符串-String" class="headerlink" title="字符串(String)"></a>字符串(String)</h4><blockquote><ul><li><p>基本介绍：</p><p>字符串就是遗传固定长度的字符连接起来的字符序列。Go的字符串是由单个字节连接起来的。Go语言的字符串的字节使用UTF-8编码识别Unicode文本</p></li><li><p>基础使用：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> str <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"洛阳龙门石窟，yyds"</span><span class="token comment">//输出结果：洛阳龙门石窟，yyds</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>注意事项和使用细节：</p><ol><li><p>Go语言的字符串的字节使用UTF-8编码标识Unicode文本，这样Golang统一使用UTF-8编码，乱码问题不会在困扰</p></li><li><p>字符串的两种表现形式</p><ul><li>双引号，会识别转义字符</li><li>反引号，以字符串的原生形输出，包括换行和特殊字符，可以实现防止攻击、输出源代码等效果</li></ul><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>str <span class="token operator">:=</span> <span class="token string">"Hello\nworld"</span> <span class="token comment">/*双引号可以识别转义符输出结果：Helloworld*/</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token comment">//反引号不会识别转义符会按照赋值的是什么就是什么</span><span class="token keyword">var</span> str2 <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">`// 引入包：文件所在包package main//导入方法使用的包import "fmt"func main() &#123;fmt.Println("\t*\t\t\t\t\t\t\t\t\t\t\t\t*\t")fmt.Println("*\t\t*\t\t\t\tI love Golang\t\t\t*\t\t*")fmt.Println("\t*\t\t\t\t\t\t\t\t\t\t\t\t*\t")fmt.Println("\t\t*\t\t\t\t\t\t\t\t\t\t*\t\t")fmt.Println("\t\t\t*\t\t\t\t\t\t\t\t*\t\t\t")fmt.Println("\t\t\t\t*\t\t\t\t\t\t*\t\t\t\t")fmt.Println("\t\t\t\t\t*\t\t\t\t*\t\t\t\t\t")fmt.Println("\t\t\t\t\t\t*\t\t*\t\t\t\t\t\t")fmt.Println("\t\t\t\t\t\t\t*")&#125;`</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>字符串拼接方式</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> str1 <span class="token operator">=</span> <span class="token string">"hello world!"</span><span class="token keyword">var</span> str2 <span class="token operator">=</span> <span class="token string">"Luo Yang"</span>str <span class="token operator">:=</span> str1<span class="token operator">+</span>str2<span class="token comment">//输出结果：hello world!Luo Yang</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>当一行中多个字符串进行拼接时并且导致长度过长，需要使用到多行字符串，使用+号进行拼接，但是换行时加号必须在上边一行</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>str <span class="token operator">:=</span> <span class="token string">"Hello "</span> <span class="token operator">+</span> <span class="token string">"Luo Yang"</span> <span class="token operator">+</span> <span class="token string">"Hello "</span> <span class="token operator">+</span> <span class="token string">"Luo Yang"</span> <span class="token operator">+</span><span class="token string">"Hello "</span> <span class="token operator">+</span> <span class="token string">"Luo Yang"</span> <span class="token operator">+</span> <span class="token string">"Hello "</span> <span class="token operator">+</span> <span class="token string">"Luo Yang"</span> <span class="token operator">+</span><span class="token string">"Hello "</span> <span class="token operator">+</span> <span class="token string">"Luo Yang"</span> <span class="token operator">+</span> <span class="token string">"Hello "</span> <span class="token operator">+</span> <span class="token string">"Luo Yang"</span> <span class="token operator">+</span><span class="token string">"Hello "</span> <span class="token operator">+</span> <span class="token string">"Luo Yang"</span><span class="token comment">//输出结果：Hello Luo YangHello Luo YangHello Luo YangHello Luo YangHello Luo YangHello Luo YangHello Luo Yang</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ul></blockquote><h3 id="基本数据类型的转换"><a href="#基本数据类型的转换" class="headerlink" title="基本数据类型的转换"></a>基本数据类型的转换</h3><blockquote><ul><li><p>介绍：</p><p>Golang和Java/C不同，Go在不同类型的变量之间赋值时需要<mark>显示转换</mark>。也就是说Golang中数据类型<mark>不能自动转换</mark></p></li><li><p>基本语法：</p><p>表达式T(v)将值v转换为类型T</p><p>T：就是数据类型，比如int32,int64,float32等等</p><p>v：就是需要转换的变量</p></li><li><p>代码演示：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> i <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">42</span><span class="token comment">//输出结果：i的类型为int,i的值为42</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"i的类型为%T,i的值为%d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token keyword">var</span> f <span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token function">float64</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token comment">//输出结果：f的类型为float64,f的值为42</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"i的类型为%T,i的值为%v\n"</span><span class="token punctuation">,</span> f<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token keyword">var</span> u <span class="token builtin">uint8</span> <span class="token operator">=</span> <span class="token function">uint8</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token comment">//输出结果：u的类型为uint8,u的值为42</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"i的类型为%T,i的值为%d\n"</span><span class="token punctuation">,</span> u<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>注意事项以及细节说明：</p><ol><li>Go中，数据类型的转换可以从表示范围小-&gt;表示范围大，也可以范围大-&gt;范围小</li><li>被转换的时<mark>变量存储的数据</mark>（即值），变量本身的数据类型并没有变化！</li><li>在转换中，比如将<mark>int64转成int8</mark>，编译时不会报错，只是<mark>转换的结果时按溢出处理</mark>，和我们希望的结果不一样</li></ol></li><li><p>注意事项以及细节说明演示代码：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> f <span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token number">64.555</span><span class="token comment">//输出结果：f的类型为float64,f的值为64.555</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"i的类型为%T,i的值为%v\n"</span><span class="token punctuation">,</span> f<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token keyword">var</span> u <span class="token builtin">uint8</span> <span class="token operator">=</span> <span class="token function">uint8</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token comment">//输出结果：u的类型为uint8,u的值为64</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"i的类型为%T,i的值为%d\n"</span><span class="token punctuation">,</span> u<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token keyword">var</span> i <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token function">int</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token comment">//输出结果：i的类型为int,i的值为64</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"i的类型为%T,i的值为%d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token comment">//输出结果：f的类型为float64,f的值为64.555</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"i的类型为%T,i的值为%v\n"</span><span class="token punctuation">,</span> f<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></blockquote><h3 id="基本数据类型和string的转换"><a href="#基本数据类型和string的转换" class="headerlink" title="基本数据类型和string的转换"></a>基本数据类型和string的转换</h3><blockquote><ul><li><p>介绍：</p><p>在程序开发中，我们经常需要将基本数据类型转换成string类型。或者将string类型转换成基本数据类型</p></li><li><p>基本数据类型转string类型：</p><ol><li><p>方式1：fmt.Sprintf(“%参数”,表达式)</p><ol><li><p>参数余姚和表达式的数据类型相匹配</p></li><li><p>fmt.Sprintf()会返回转换后的字符串</p></li><li><p>代码演示：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> i <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">99</span><span class="token keyword">var</span> f <span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token number">66.666</span><span class="token keyword">var</span> <span class="token builtin">bool</span> <span class="token builtin">bool</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token keyword">var</span> char <span class="token builtin">byte</span> <span class="token operator">=</span> <span class="token char">'h'</span><span class="token keyword">var</span> s <span class="token builtin">string</span><span class="token comment">//将i值转换为字符串</span>s <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token comment">//输出结果：s的类型为：string，s的值为："99"</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"s的类型为：%T，s的值为：%q\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token comment">//将f值转换为字符串</span>s <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%f"</span><span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token comment">//输出结果：s的类型为：string，s的值为："66.666000"</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"s的类型为：%T，s的值为：%q\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token comment">//将bool值转换为字符串</span>s <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%t"</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span><span class="token comment">//输出结果：s的类型为：string，s的值为："true"</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"s的类型为：%T，s的值为：%q\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token comment">//将char值转换为字符串</span>s <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> char<span class="token punctuation">)</span><span class="token comment">//输出结果：s的类型为：string，s的值为："h"</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"s的类型为：%T，s的值为：%q\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li><li><p>方式2：使用strconv包函数</p><ol><li><p>代码演示：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token comment">//导入strconv包</span><span class="token string">"strconv"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> i <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">99</span><span class="token keyword">var</span> f <span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token number">66.666</span><span class="token keyword">var</span> <span class="token builtin">bool</span> <span class="token builtin">bool</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token keyword">var</span> u <span class="token builtin">uint</span> <span class="token operator">=</span> <span class="token number">88</span><span class="token keyword">var</span> num <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">4567</span><span class="token keyword">var</span> s <span class="token builtin">string</span><span class="token comment">//将bool类型转换为字符串类型</span>s <span class="token operator">=</span> strconv<span class="token punctuation">.</span><span class="token function">FormatBool</span><span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">)</span><span class="token comment">//输出结果：s的数据类型为：string，数据的值为："true"</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"s的数据类型为：%T，数据的值为：%q\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token comment">/*将f类型转换为字符串类型传入参数：第一个：需要转换的数据第二个：格式，f为默认格式，其余格式参考接口文档第三个：小数点后保留位数第四个：需要转换的变量数据类型时float64还是float32*/</span>s <span class="token operator">=</span> strconv<span class="token punctuation">.</span><span class="token function">FormatFloat</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token char">'f'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token comment">//输出结果：s的数据类型为：string，数据的值为："66.66600"</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"s的数据类型为：%T，数据的值为：%q\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token comment">/*将int类型转换为字符串类型,传入参数：第一个：需要转换的变量，参数类型需要为int64，如果不满足需要强制转换第二个：需要转换的变量的进制此处为10进制（范围：2~36）*/</span>s <span class="token operator">=</span> strconv<span class="token punctuation">.</span><span class="token function">FormatInt</span><span class="token punctuation">(</span><span class="token function">int64</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token comment">//输出结果：s的数据类型为：string，数据的值为："99"</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"s的数据类型为：%T，数据的值为：%q\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token comment">/*将uint类型转换为字符串类型传入参数：第一个：需要转换的变量，传入参数要求必须为uint64，不满足需强制转换第二个：需要转换的变量的进制*/</span>s <span class="token operator">=</span> strconv<span class="token punctuation">.</span><span class="token function">FormatUint</span><span class="token punctuation">(</span><span class="token function">uint64</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token comment">//输出结果：s的数据类型为：string，数据的值为："88"</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"s的数据类型为：%T，数据的值为：%q\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token comment">/*strconv包中还有一个函数Itoa用来将int类型转换为字符串传入参数：第一个：传入要转换为字符串类型的int类型数据需要注意：传入的变量类型必须为int如果不是需要进行强转*/</span>s <span class="token operator">=</span> strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"s的数据类型为：%T，数据的值为：%q\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ol></li></ul></blockquote><h3 id="string类型转基本数据类型"><a href="#string类型转基本数据类型" class="headerlink" title="string类型转基本数据类型"></a>string类型转基本数据类型</h3><blockquote><ul><li><p>使用strconv包函数</p><p>代码演示：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token comment">//导入strconv包</span><span class="token string">"strconv"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> s1 <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"true"</span><span class="token keyword">var</span> s2 <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"12345"</span><span class="token keyword">var</span> s3 <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"66.666"</span><span class="token keyword">var</span> b <span class="token builtin">bool</span><span class="token keyword">var</span> i <span class="token builtin">int64</span><span class="token keyword">var</span> f <span class="token builtin">float64</span><span class="token keyword">var</span> u <span class="token builtin">uint64</span><span class="token comment">/*使用strconv的转换字符串为bool类型，传入参数：第一个：需要转换为bool类型的字符串返回值：第一个：数据类型：bool 转换后的bool类型的值第二个：数据类型：err*/</span>b<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> strconv<span class="token punctuation">.</span><span class="token function">ParseBool</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token comment">//输出结果：s的数据类型为：string，数据的值为：true</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"b的数据类型为：%T，数据的值为：%t\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token comment">/*使用strconv的转换字符串为int类型，传入参数：第一个：需要转换为int类型的字符串数据类型：string第二个：返回值进制数，范围是2~36数据类型：int第三个：返回值整数类型，此处必须是无溢出的数据类型：int返回值：第一个：数据类型：int 转换后的int类型的值第二个：数据类型：err*/</span>i<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> strconv<span class="token punctuation">.</span><span class="token function">ParseInt</span><span class="token punctuation">(</span>s2<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token comment">//输出结果：i的数据类型为：int64，数据的值为：12345</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"i的数据类型为：%T，数据的值为：%d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token comment">/*使用strconv的转换字符串为int类型，传入参数：第一个：需要转换为int类型的字符串数据类型：string第二个：返回值数据类型，如果想要返回float32则传入参数填32，float64则填64数据类型：int返回值：第一个：数据类型：float64 转换后的float64类型的值第二个：数据类型：err*/</span>f<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> strconv<span class="token punctuation">.</span><span class="token function">ParseFloat</span><span class="token punctuation">(</span>s3<span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token comment">//输出结果：f的数据类型为：float，数据的值为：66.666</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"f的数据类型为：%T，数据的值为：%f\n"</span><span class="token punctuation">,</span> f<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token comment">/*使用strconv的转换字符串为uint类型，传入参数：第一个：需要转换为uint类型的字符串数据类型：string第二个：返回值进制数，范围是2~36数据类型：int第三个：返回值整数类型，此处必须是无溢出的数据类型：int返回值：第一个：数据类型：uint 转换后的uint类型的值第二个：数据类型：err*/</span>u<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> strconv<span class="token punctuation">.</span><span class="token function">ParseUint</span><span class="token punctuation">(</span>s2<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token comment">//输出结果：i的数据类型为：int64，数据的值为：12345</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"i的数据类型为：%T，数据的值为：%d\n"</span><span class="token punctuation">,</span> u<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></blockquote><h3 id="派生-复杂数据类型"><a href="#派生-复杂数据类型" class="headerlink" title="派生/复杂数据类型"></a>派生/复杂数据类型</h3><h4 id="指针（pointer）"><a href="#指针（pointer）" class="headerlink" title="指针（pointer）"></a>指针（pointer）</h4><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><h4 id="结构体（struct）"><a href="#结构体（struct）" class="headerlink" title="结构体（struct）"></a>结构体（struct）</h4><h4 id="管道（Channel）"><a href="#管道（Channel）" class="headerlink" title="管道（Channel）"></a>管道（Channel）</h4><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><h4 id="切片（slice）"><a href="#切片（slice）" class="headerlink" title="切片（slice）"></a>切片（slice）</h4><h4 id="接口（interface）"><a href="#接口（interface）" class="headerlink" title="接口（interface）"></a>接口（interface）</h4><h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><blockquote><p>概念：白能量相当于内存中一个数据存储空间的表示，你可以把变量看作是一个房间的们的门牌号，通过门牌号我们可以找到房间，同样的道理，通过变量名可以访问到变量的值。</p></blockquote><h3 id="为什么需要变量"><a href="#为什么需要变量" class="headerlink" title="为什么需要变量"></a>为什么需要变量</h3><blockquote><p>变量是程序的基本组成单位：不论是使用哪种高级程序语言编写程序，变量都是其程序的基本组成单位。</p></blockquote><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token comment">//getVal为自定义方法名，第一个大括号内为需要传入的参数以及参数类型，第二个括号内为返回值个数和数据类型</span><span class="token keyword">func</span> <span class="token function">getVal</span><span class="token punctuation">(</span>num1 <span class="token builtin">int</span><span class="token punctuation">,</span> num2 <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//sum和sub均为定义的变量，num1和num2为传入的参数</span>sum <span class="token operator">:=</span> num1 <span class="token operator">+</span> num2sub <span class="token operator">:=</span> num1 <span class="token operator">-</span> num2<span class="token keyword">return</span> sum<span class="token punctuation">,</span> sub<span class="token comment">//此处是返回值</span><span class="token punctuation">&#125;</span><span class="token comment">//主函数(主方法)程序入口</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//定义变量sum和sub用来接收getVal的返回值，顺序与方法中的返回值顺序相同</span>sum<span class="token punctuation">,</span> sub <span class="token operator">:=</span> <span class="token function">getVal</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"sum="</span><span class="token punctuation">,</span> sum<span class="token punctuation">,</span> <span class="token string">"sub="</span><span class="token punctuation">,</span> sub<span class="token punctuation">)</span>sum2<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> <span class="token function">getVal</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"sum2="</span><span class="token punctuation">,</span> sum2<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>运行结果如下所示：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/chenxiancen/ImgPicGo/blogimg/go%E5%8F%98%E9%87%8F%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.png" alt="image-20240306152100396"></p><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><blockquote><ol><li>变量声明(有人也叫: 定义变量)</li><li>赋值</li><li>使用</li></ol></blockquote><h3 id="变量声明的方式以及使用"><a href="#变量声明的方式以及使用" class="headerlink" title="变量声明的方式以及使用"></a>变量声明的方式以及使用</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token comment">//全局变量：此变量可以在任何地方使用不需要传入</span><span class="token keyword">var</span> tom <span class="token operator">=</span> <span class="token number">100</span><span class="token keyword">var</span> jack <span class="token operator">=</span> <span class="token number">200</span><span class="token comment">//一次声明多个全局变量</span><span class="token keyword">var</span><span class="token punctuation">(</span>    marry <span class="token operator">=</span> <span class="token number">18</span>    kiko <span class="token operator">=</span> <span class="token number">22</span>    mimi <span class="token operator">=</span> <span class="token number">44</span><span class="token punctuation">)</span><span class="token keyword">func</span> main <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//方式一：指定变量类型定义后若不赋值则使用默认值:i是自定义的变量名，int是定义的变量的数据类型为int类型</span>    <span class="token keyword">var</span> i <span class="token builtin">int</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"变量声明方式一：i="</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>        <span class="token comment">//方式二：根据值自行判定变量类型（类型推导）</span>    <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10.11</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"变量声明方式二：num="</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span>        <span class="token comment">//方式三：省略var，注意:=左侧的变量不应该是已经声明过的，否则会导致编译错误</span>    num2 <span class="token operator">:=</span> <span class="token string">"hello"</span>    <span class="token comment">//i := 1//此处放开前边注释会导致编译错误，因为前边已经定义过变量名为i的变量</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"变量声明方式三：num2="</span><span class="token punctuation">,</span>num2<span class="token punctuation">)</span>        <span class="token comment">//多变量声明方式一</span>    <span class="token keyword">var</span> n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> n3 <span class="token builtin">int</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"n1="</span><span class="token punctuation">,</span> n1<span class="token punctuation">,</span> <span class="token string">"n2="</span><span class="token punctuation">,</span> n2<span class="token punctuation">,</span> <span class="token string">"n3="</span><span class="token punctuation">,</span> n3<span class="token punctuation">)</span>        <span class="token comment">//多变量声明方式二</span>    <span class="token keyword">var</span> n4<span class="token punctuation">,</span> n5<span class="token punctuation">,</span> n6 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">"tom"</span><span class="token punctuation">,</span> <span class="token number">888</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"n4="</span><span class="token punctuation">,</span> n4<span class="token punctuation">,</span> <span class="token string">"n5 ="</span><span class="token punctuation">,</span> n5<span class="token punctuation">,</span> <span class="token string">"n6="</span><span class="token punctuation">,</span> n6<span class="token punctuation">)</span><span class="token comment">//多变量声明方式三</span>    n7<span class="token punctuation">,</span> n8<span class="token punctuation">,</span> n9 <span class="token operator">:=</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">"cat"</span><span class="token punctuation">,</span> <span class="token number">666</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"n7="</span><span class="token punctuation">,</span> n7<span class="token punctuation">,</span> <span class="token string">"n8 ="</span><span class="token punctuation">,</span> n8<span class="token punctuation">,</span> <span class="token string">"n9="</span><span class="token punctuation">,</span> n9<span class="token punctuation">)</span>        <span class="token comment">//变量赋值，给自定义的i赋值为20</span>    i <span class="token operator">=</span> <span class="token number">20</span>        <span class="token comment">//使用变量</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"i="</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>        <span class="token comment">//输出全局变量</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"tom="</span><span class="token punctuation">,</span> tom<span class="token punctuation">,</span> <span class="token string">"jack"</span><span class="token punctuation">,</span> jack<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"marry="</span><span class="token punctuation">,</span> marry<span class="token punctuation">,</span> <span class="token string">"kiko="</span><span class="token punctuation">,</span> kiko<span class="token punctuation">,</span> <span class="token string">"mimi="</span><span class="token punctuation">,</span> mimi<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用注意事项"><a href="#使用注意事项" class="headerlink" title="使用注意事项"></a>使用注意事项</h3><blockquote><ol><li><p>变量表示内存中的一个存储区域</p></li><li><p>该区域有自己的名称（变量名）和类型（数据类型）</p></li><li><p><a href="#变量声明的方式以及使用">Golang变量使用的三种方式</a></p><ol><li>指定变量类型，声明后若不赋值，使用默认值</li><li>根据值自行判定变量类型（类型推导）</li><li>省略var，注意:=左侧的变量不应该是已经声明过的，否则会导致编译错误</li></ol></li><li><p><a href="#变量声明的方式以及使用">多变量声明</a>，在编程中，有时我们需要一次性声明多个变量，Golang也提供这样的语法</p></li><li><p>该区域的数据值可以在同一类型范围内不断变化</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> i <span class="token builtin">int</span>    <span class="token comment">//此处的输出结果为0</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"初始默认值："</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>    i <span class="token operator">=</span> <span class="token number">30</span>    <span class="token comment">//此处的输出结果为30</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"第一次变化的值："</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>    i <span class="token operator">=</span> <span class="token number">50</span>    <span class="token comment">//此处的输出结果为50</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"第二次变化的值："</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>        <span class="token comment">//i = 1.2//变量i的数据类型为整数型因此只能存储整数型数据，此处删除行前的注释则会报错</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>变量在同一作用域内(在一个函数或者在代码块)不能重名</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> i <span class="token builtin">int</span>    i <span class="token operator">:=</span> <span class="token number">99</span><span class="token comment">//此处会报错，同一作用域内变量重复导致报错</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>变量=变量名+值+数据类型</p></li><li><p>Golang的变量如果没有赋初值，编译器会使用默认值，比如int默认值为0，string默认值为空串</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span>         <span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> i <span class="token builtin">int</span>    <span class="token comment">//此处的输出结果为：int数据类型默认值: 0</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"int数据类型默认值:"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>    <span class="token keyword">var</span> str <span class="token builtin">string</span>    <span class="token comment">//此处的输出结果为：string数据类型默认值:"  "</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"string数据类型默认值:\""</span><span class="token punctuation">,</span> str<span class="token punctuation">,</span> <span class="token string">"/"</span>"<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></blockquote>]]></content>
    
    
    <summary type="html">go语言</summary>
    
    
    
    <category term="技术" scheme="https://love.moyanruruo.top/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="go" scheme="https://love.moyanruruo.top/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>添加站外标签</title>
    <link href="https://love.moyanruruo.top/posts/5343fbc2.html"/>
    <id>https://love.moyanruruo.top/posts/5343fbc2.html</id>
    <published>2024-03-01T11:58:54.000Z</published>
    <updated>2024-03-13T15:35:38.030Z</updated>
    
    <content type="html"><![CDATA[<h1 id="添加站外标签"><a href="#添加站外标签" class="headerlink" title="添加站外标签"></a>添加站外标签</h1><h2 id="效果预览"><a href="#效果预览" class="headerlink" title="效果预览"></a>效果预览</h2><a class="tag-Link" target="_blank" href="https://blog.anheyu.com/">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://api.iowen.cn/favicon/blog.anheyu.com/.png);"></div>        <div class="tag-link-right">            <div class="tag-link-title">安知鱼博客</div>            <div class="tag-link-sitename">安知鱼</div>        </div>        <i class="fa-solid fa-angle-right"></i>    </div>    </a><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><h3 id="创建js文件"><a href="#创建js文件" class="headerlink" title="创建js文件"></a>创建js文件</h3><blockquote><p>新建文件themes/butterfly/scripts/tag/<mark>link.js</mark></p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">link</span><span class="token punctuation">(</span><span class="token parameter">args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    args <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> title <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> sitename <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> link <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 获取网页favicon</span>    <span class="token keyword">let</span> urlNoProtocol <span class="token operator">=</span> link<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^https?\:\/\/</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> imgUrl <span class="token operator">=</span> <span class="token string">"https://api.iowen.cn/favicon/"</span> <span class="token operator">+</span> urlNoProtocol <span class="token operator">+</span> <span class="token string">".png"</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;a class="tag-Link" target="_blank" href="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>link<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">">    &lt;div class="tag-link-tips">引用站外地址&lt;/div>    &lt;div class="tag-link-bottom">        &lt;div class="tag-link-left" style="background-image: url(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>imgUrl<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">);">&lt;/div>        &lt;div class="tag-link-right">            &lt;div class="tag-link-title"></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>title<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/div>            &lt;div class="tag-link-sitename"></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>sitename<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/div>        &lt;/div>        &lt;i class="fa-solid fa-angle-right">&lt;/i>    &lt;/div>    &lt;/a></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">&#125;</span>hexo<span class="token punctuation">.</span>extend<span class="token punctuation">.</span>tag<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">'link'</span><span class="token punctuation">,</span>link<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">ends</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加css"><a href="#添加css" class="headerlink" title="添加css"></a>添加css</h3><blockquote><p>在<mark>主题配置文件_config.yml</mark>文件中的<mark>inject的head</mark>下添加<mark>css</mark></p></blockquote><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">- <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/gh/zhheo/JS-Heo@master/mainColor/heoMainColor.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>- <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/gh/zhheo/JS-Heo@main/tag-link/tag-link.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><blockquote><p>在markdown文档中使用如下格式</p></blockquote><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&#123;% link 主标题,副标题,站外url链接 %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">hexo+butterfly添加站外标签</summary>
    
    
    
    <category term="技术" scheme="https://love.moyanruruo.top/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="hexo" scheme="https://love.moyanruruo.top/tags/hexo/"/>
    
    <category term="butterfly" scheme="https://love.moyanruruo.top/tags/butterfly/"/>
    
  </entry>
  
  <entry>
    <title>Linux</title>
    <link href="https://love.moyanruruo.top/posts/456cce22.html"/>
    <id>https://love.moyanruruo.top/posts/456cce22.html</id>
    <published>2024-02-22T18:23:54.000Z</published>
    <updated>2024-03-13T15:35:38.030Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux常用知识"><a href="#Linux常用知识" class="headerlink" title="Linux常用知识"></a>Linux常用知识</h1><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//强制停止</span>ctrl<span class="token operator">+</span>c<span class="token comment">//退出或者登出账户,不能退出vi/vim</span>ctrl<span class="token operator">+</span>d<span class="token comment">//自动执行上一次匹配前缀的命令，只能适用于短时间的命令</span><span class="token operator">!</span><span class="token operator">+</span>最近使用命令的前缀<span class="token comment">//输入内容区匹配历史命令，回车会执行，键盘左右键可以得到此命令不执行</span>ctrl<span class="token operator">+</span>r 输入内容匹配历史命令<span class="token comment">//光标移动快捷键</span><span class="token number">1.</span>ctrl <span class="token operator">+</span>a<span class="token comment">//跳到命令开头</span><span class="token number">2.</span>ctrl <span class="token operator">+</span>e<span class="token comment">//跳到命令结尾</span><span class="token number">3.</span>ctrl <span class="token operator">+</span>键盘左键<span class="token comment">//向左跳一个单词</span><span class="token number">4.</span>ctrl <span class="token operator">+</span>键盘右键<span class="token comment">//向右跳一个单词</span><span class="token comment">//清屏</span>ctrl<span class="token operator">+</span>l<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="finalshell连接虚拟机"><a href="#finalshell连接虚拟机" class="headerlink" title="finalshell连接虚拟机"></a>finalshell连接虚拟机</h2><blockquote><p>注意点：连接Ubuntu可能会遇到问题，<a href="#finalshell连接Ubuntu问题解决方案">解决方案</a></p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//1.首先打开虚拟机</span><span class="token comment">//2.打开finalshell,点击左上角文件夹图标创建ssh连接</span><span class="token comment">//3.去虚拟机中打开终端查询虚拟机ip(命令如下)</span>ifconfig   <span class="token comment">//查询虚拟机ip</span><span class="token comment">//4.设置虚拟机登录用的用户名以及密码，在填写好连接的虚拟机系统的名称点击确定即可</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="finalshell连接Ubuntu问题解决方案"><a href="#finalshell连接Ubuntu问题解决方案" class="headerlink" title="finalshell连接Ubuntu问题解决方案"></a>finalshell连接Ubuntu问题解决方案</h2><blockquote><p>注意点：在终端操作过程中可能一些命令需要下载</p><p>使用 sudo apt install +需要下载的命令</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//获取ip地址</span>ifconfig<span class="token comment">//安装连接配件</span>sudo apt<span class="token operator">-</span>get install openssh<span class="token operator">-</span>server<span class="token comment">//重启ssh服务</span>sudo service ssh restart<span class="token comment">//检查ssh服务是否开启</span>sudo ps <span class="token operator">-</span>e <span class="token operator">|</span> grep ssh<span class="token comment">//打开防火墙</span>sudo ufw enable<span class="token comment">//查看防火墙状态（看是否配置的端口能被放行）</span>sudo ufw status<span class="token comment">//若不存在连接的默认端口使用如下命令来放行指定端口连接</span>sudo ufw allow <span class="token operator">+</span>指定端口号<span class="token comment">//检查是否放行</span>sudo ufw status<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Finalshell上传下载文件失败解决方案"><a href="#Finalshell上传下载文件失败解决方案" class="headerlink" title="Finalshell上传下载文件失败解决方案"></a>Finalshell上传下载文件失败解决方案</h2><blockquote><ol><li>看连接虚拟机使用的是否是root权限，不是的话更改设置为root权限进入</li><li>看版本是否是最新的版本</li></ol></blockquote><h2 id="权限列标识"><a href="#权限列标识" class="headerlink" title="权限列标识"></a>权限列标识</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//1.第一列</span>d：表示文件夹<span class="token operator">-</span>：表示文件l：表示软连接<span class="token comment">//所属用户权限</span><span class="token comment">//2.第二列</span>r<span class="token operator">:</span>表示所属用户有查看此文件内容的权限或查看文件夹内容的权限如ls命令<span class="token operator">-</span><span class="token operator">:</span>表示所属用户没有查看此文件的权限<span class="token comment">//3.第三列</span>w<span class="token operator">:</span>表示所属用户有对文件夹创建、删除、改名等操作的权限或者修改文件内容的权限<span class="token operator">-</span><span class="token operator">:</span>表示所属用户没有这些权限<span class="token comment">//4.第四列</span>x<span class="token operator">:</span>表示针对文件夹，可以更改工作目录到此文件夹，即cd进入或将文件作为程序执行的权限<span class="token comment">//所属用户组权限</span><span class="token comment">//5.第五列</span>同所属用户权限的读的权限一致<span class="token comment">//6.第六列</span>同所属用户权限的写的权限一致<span class="token comment">//7.第七列</span>同所属用户执行权限一致<span class="token comment">//其他用户权限</span><span class="token comment">//8.第八列</span>同所属用户权限的读的权限一致<span class="token comment">//9.第九列</span>同所属用户权限的写的权限一致<span class="token comment">//10.第十列</span>同所属用户执行权限一致<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h2><blockquote><p>用来模糊匹配使用</p><p>使用场景：</p><ol><li><a href="#rm命令">rm命令</a></li><li><a href="#find命令">find命令</a></li></ol></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//示例</span><span class="token number">1.</span> <span class="token operator">*</span>test<span class="token comment">//以test结尾</span><span class="token number">2.</span> test<span class="token operator">*</span><span class="token comment">//以test开头</span><span class="token number">3.</span> <span class="token operator">*</span>test<span class="token operator">*</span><span class="token comment">//包含test的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="管道符"><a href="#管道符" class="headerlink" title="管道符"></a>管道符</h2><blockquote><p>|：管道符|将左边命令的结果，作为右边命令的输入</p><p>示例：</p><p>cat hello.txt | grep hello</p><p>cat hello.txt的输出结果（文件内容）</p><p>作为右边grep命令的输入（被过滤的文件）</p></blockquote><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="ls命令"><a href="#ls命令" class="headerlink" title="ls命令"></a>ls命令</h3><blockquote><p>查看文件夹内容的命令</p><p>ls [-a -l -h] [Linux路径]</p><p>[-a -l -h]：是选项</p><p>[Linux路径]：可以查看指定路径下的文件</p><p>选项可以组合使用，使用格式举例：</p><p>ls -l -a</p><p>ls -la</p><p>ls -al</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//选项</span><span class="token number">1.</span><span class="token operator">-</span>a：表示all的意思，列出所有文件（包括隐藏的文件和隐藏的文件夹）<span class="token comment">//列出的文件中以.开头的表示是隐藏文件</span><span class="token number">2.</span><span class="token operator">-</span>l：表示以列表或者竖向排列的形式展示内容并且展示更多信息<span class="token number">3.</span><span class="token operator">-</span>h：表示以易于阅读的形式，列出文件的大小，如<span class="token class-name">K</span>、<span class="token class-name">M</span>、<span class="token class-name">G</span><span class="token comment">//-h选项必须搭配-l一起使用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="cd命令"><a href="#cd命令" class="headerlink" title="cd命令"></a>cd命令</h3><blockquote><p>当Linux终端打开时，默认以Home目录作为当前的工作目录</p><p>cd命令用来更改当前所在的工作目录</p><p>cd [Linux路径]</p><p>注意：</p><p>cd命令无需选项，只有参数，表示要切换到哪个目录下</p><p>cd命令直接执行，不写参数，表示回到用户的HOME目录</p></blockquote><h3 id="pwd命令"><a href="#pwd命令" class="headerlink" title="pwd命令"></a>pwd命令</h3><blockquote><p>pwd命令用来查看当前工作目录</p><p>pwd命令无选项，无参数，字节输入pwd即可</p></blockquote><h3 id="mkdir命令"><a href="#mkdir命令" class="headerlink" title="mkdir命令"></a>mkdir命令</h3><blockquote><p>创建文件夹命令</p><p>语法：mkdir [-p] Liux路径</p><p>注意：</p><p>参数必填，表示Linux路径，即要创建的文件夹的路径，相对路径或绝对路径均可</p><p>创建文件夹在HOME目录内是不需要权限的，在其他目录下可能需要权限</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//选项</span><span class="token operator">-</span>p：当需要创建多层级的目录且创建文件的父目录不存在时需要使用此选项<span class="token comment">//比如需要在HOME目录下的test文件夹下创建一个hello文件夹时，test文件夹不存在需要使用-p选项如下：</span>mkdir <span class="token operator">-</span>p <span class="token operator">~</span><span class="token operator">/</span>test<span class="token operator">/</span>hello<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="touch、cat和more命令"><a href="#touch、cat和more命令" class="headerlink" title="touch、cat和more命令"></a>touch、cat和more命令</h3><blockquote><p>touch:创建文件</p><p>语法：touch Linux路径</p><p>注意：</p><p>touch命令无选项，参数必填，表示要创建的文件路径，相对、绝对、特殊路径均可使用</p><p>cat:查看文件内容</p><p>语法：cat Linux路径</p><p>注意：</p><p>cat没有选项，只有必填参数，参数表示：被查看的文件路径，相对、绝对、特殊路径符均可使用</p><p>cat只能查看文件内容不能进行修改</p><p>more:查看文件内容</p><p>语法：more Linux路径</p><p>注意：</p><p>同样没有选项，只有必填参数，参数表示：被查看的文件路径，相对、绝对、特殊路径符均可使用</p><p>空格进行翻页，q退出查看</p><p>cat与more不同：</p><p>cat是直接将内容全部显示出来</p><p>more支持翻页，如果文件内容过多，可以一页页展示</p></blockquote><h3 id="cp命令"><a href="#cp命令" class="headerlink" title="cp命令"></a>cp命令</h3><blockquote><p>cp：复制文件、文件夹</p><p>语法：cp [-r] 参数1 参数2</p><p>注意：</p><p>参数1，Linux路径，表示被复制的文件或文件夹</p><p>参数2，Linux路径，表示要复制去的地方</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//选项</span><span class="token operator">-</span>r ：可选，用于复制文件夹使用，表示递归<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="mv命令"><a href="#mv命令" class="headerlink" title="mv命令"></a>mv命令</h3><blockquote><p>mv：移动文件、文件夹</p><p>语法：mv 参数1 参数2</p><p>注意：</p><p>参数1，Linux路径，表示被移动的文件或文件夹</p><p>参数2，Linux路径，表示要移动去的地方，如果目标不存在，则进行改名确保目标存在</p></blockquote><h3 id="rm命令"><a href="#rm命令" class="headerlink" title="rm命令"></a>rm命令</h3><blockquote><p>rm：删除文件、文件夹</p><p>语法：rm [-r -f] 参数1 参数2 …… 参数N</p><p>注意：</p><p>同cp命令一样，-r选项用于删除文件夹</p><p>-f表示force，强制删除（不会弹出提示确认信息）</p><p>​    表示用户删除内容不会弹出提示，只有root管理员用户删除内容会有提示</p><p>​    所以一般用户用不到-f选项</p><p>参数1、参数2、……、参数N表示要删除的文件或者文件夹路径，按照空格隔开</p><p>rm命令可以使用<a href="#通配符">通配符</a>*，用来模糊匹配</p></blockquote><h3 id="which命令"><a href="#which命令" class="headerlink" title="which命令"></a>which命令</h3><blockquote><p>which：查找命令的程序文件（查找命令的.exe文件的存放位置）</p><p>语法：which 要查找的命令</p></blockquote><h3 id="find命令"><a href="#find命令" class="headerlink" title="find命令"></a>find命令</h3><blockquote><p>find：可以通过find命令去搜索指定的文件</p><p>语法：</p><p>按文件名查找</p><p>find 起始路径 -name “被查找文件名”</p><p>按文件大小查找</p><p>find 起始路径 -size +|- n[kMG]</p><p>+、-：表示大于和小于</p><p>n：表示大小数字</p><p>KMG：表示大小单位，k（小写字母）表示kb，M表示MB，G表示GB</p><p>注意：</p><p>使用root用户可以在整个系统完成搜索</p><p>find命令可以使用<a href="#通配符">通配符</a>进行查找</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//选项</span><span class="token operator">-</span>name<span class="token operator">:</span>按照文件名查找<span class="token operator">-</span>size：按照文件大小查找<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="grep命令"><a href="#grep命令" class="headerlink" title="grep命令"></a>grep命令</h3><blockquote><p>grep：使用grep命令可以从文件中通过关键字过滤文件行</p><p>语法：grep [-n] 关键字 文件路径</p><p>注意：</p><p>选项-n，可选，表示在结果中显示匹配的行的行号</p><p>参数，关键字，必填，表示过滤的关键字，带有空格或其他特殊符号，建议使用“ ”将关键字包围起来</p><p>参数，文件路径，必填，表示要过滤内容的文件路径，可作为内容输入端口</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">-</span>n：显示匹配到的关键字所在的行的行号<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="wc命令"><a href="#wc命令" class="headerlink" title="wc命令"></a>wc命令</h3><blockquote><p>wc：统计文件的行数、单词数量等</p><p>语法：wc [-c -m -l -w] 文件路径</p><p>注意：</p><p>参数，文件路径，被统计的文件，可作为内容输入端口</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//选项</span><span class="token operator">-</span>c<span class="token operator">:</span>统计bytes数量（字节数量）<span class="token operator">-</span>m：统计字符数量<span class="token operator">-</span>l：统计行数<span class="token operator">-</span>w：统计单词数量<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="echo命令"><a href="#echo命令" class="headerlink" title="echo命令"></a>echo命令</h3><blockquote><p>echo：输出内容</p><p>语法：echo 输出的内容</p><p>注意：</p><p>无需选项，只有一个参数，表示要输出的内容，复杂内容可以用“ ”包围</p><p>带有空格或\等符号，建议使用双引号包围，因为不包围的话，空格后很容易被识别为参数2，尽管echo不受影响，但是要养成习惯</p></blockquote><h3 id="tail命令"><a href="#tail命令" class="headerlink" title="tail命令"></a>tail命令</h3><blockquote><p>tail：查看文件尾部内容，跟踪文件的最新更改</p><p>语法：tail [-f -num] Linux路径</p><p>注意：</p><p>参数，Linux路径，表示被跟踪的文件路径</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//参数</span><span class="token operator">-</span>f<span class="token operator">:</span>表示持续跟踪，相当于对文件进行修改会实时更新最后添加的内容<span class="token operator">-</span>num<span class="token operator">:</span>表示查看尾部多少行，不填默认<span class="token number">10</span>行，num选项可以直接填写数字如tail <span class="token operator">-</span><span class="token number">5</span> test<span class="token punctuation">.</span>txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="vi和vim"><a href="#vi和vim" class="headerlink" title="vi和vim"></a>vi和vim</h3><blockquote><p>vi和vim：都是文本编辑器</p><p>语法：vi/vim Linux路径</p><p>不同：</p><p>vim是vi的加强版本，兼容vi所有指令，不仅能编辑文本，而且还具有shell程序编辑的功能，可以不同暗色的字体来辨别语法的正确性，极大的方便了程序的设计和编辑性。</p><p>注意：</p><p>如果文件路径表示的文件不存在，那么此命令会用于编辑新文件</p><p>如果文件路径表示文件存在，那么此命令用于编辑已有文件</p><p>模式：</p><p>命令模式：可以通过输入指令对文件进行修改等一系列操作</p><p>底线模式：在命令模式下输入：即可进入底线模式（不需要敲回车），底线模式主要用来对文件内容进行保存或者退出编辑等操作</p><p>输入模式：通过指定按键进入输入模式，输入模式下可以对文件内容进行修改</p><p><mark>任何情况下回到命令模式的按键都是是Esc</mark></p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//命令模式指令</span><span class="token number">1.</span> i<span class="token operator">:</span>在当前光标位置进入输入模式，可以对文件内容进行修改<span class="token number">2.</span> a<span class="token operator">:</span>在当前光标位置之后进入输入模式<span class="token number">3.</span> <span class="token class-name">I</span><span class="token operator">:</span>在当前行的开头进入输入模式<span class="token number">4.</span> <span class="token class-name">A</span><span class="token operator">:</span>在当前行的结尾进入输入模式<span class="token number">5.</span> o<span class="token operator">:</span>在当前光标的下一行进入输入模式<span class="token number">6.</span> <span class="token class-name">O</span><span class="token operator">:</span>在当前光标的上一行进入输入模式<span class="token number">7.</span> <span class="token number">0</span><span class="token operator">:</span>数字<span class="token number">0</span>移动光标到当前行的开头<span class="token number">8.</span> $<span class="token operator">:</span>移动光标到当前行的结尾<span class="token number">9.</span> <span class="token function">pageup</span><span class="token punctuation">(</span><span class="token class-name">PgUp</span><span class="token punctuation">)</span><span class="token operator">:</span>向上翻页<span class="token number">10.</span> <span class="token function">pangdown</span><span class="token punctuation">(</span><span class="token class-name">PgDn</span><span class="token punctuation">)</span><span class="token operator">:</span>向下翻页<span class="token number">11.</span> <span class="token operator">/</span><span class="token operator">:</span>进入搜索模式<span class="token number">12.</span> n<span class="token operator">:</span>向下继续搜索<span class="token number">13.</span> <span class="token class-name">N</span><span class="token operator">:</span>向上继续搜索<span class="token number">14.</span> dd<span class="token operator">:</span>删除一行<span class="token number">15.</span> ndd<span class="token operator">:</span>删除当前光标下n行<span class="token number">16.</span> yy<span class="token operator">:</span>复制当前行<span class="token number">17.</span> nyy<span class="token operator">:</span>复制当前光标下n行<span class="token number">18.</span> p<span class="token operator">:</span>粘贴<span class="token number">19.</span> u<span class="token operator">:</span>撤销<span class="token number">20.</span> ctrl<span class="token operator">+</span>r<span class="token operator">:</span>反向撤销修改<span class="token number">21.</span> gg<span class="token operator">:</span>跳到首行<span class="token number">22.</span> <span class="token class-name">G</span><span class="token operator">:</span>跳到行尾<span class="token number">23.</span> dG<span class="token operator">:</span>从当前行开始，向下全部删除<span class="token number">24.</span> dgg<span class="token operator">:</span>从当前行开始，向上全部删除<span class="token number">25.</span> d$<span class="token operator">:</span>从当前光标开始，删除到本行的结尾<span class="token number">25.</span> d0<span class="token operator">:</span>从当前光标开始，删除到本行的开头<span class="token comment">//底线模式指令：</span><span class="token operator">:</span>wq<span class="token operator">:</span>保存退出<span class="token operator">:</span>q<span class="token operator">:</span>仅退出<span class="token operator">:</span>q<span class="token operator">!</span><span class="token operator">:</span>强制退出<span class="token operator">:</span>w<span class="token operator">:</span>仅保存<span class="token operator">:</span>set nu<span class="token operator">:</span>显示行号<span class="token operator">:</span>set paste<span class="token operator">:</span>设置粘贴模式（确保你从文件外部复制的内容保持一致）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="getent命令"><a href="#getent命令" class="headerlink" title="getent命令"></a>getent命令</h3><blockquote><p>getent：查看当前系统中有那些用户</p><p>语法：</p><p>查看系统中用户</p><p>getent passwd</p><p><mark>输出信息分析：用户名：密码(x)：用户ID：描述信息(无用)：HOME目录:执行终端(默认bash)</mark></p><p>查看系统中用户组</p><p>getent group</p><p><mark>输出信息分析：组名称:组认证(显示为x):组ID</mark></p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//查看系统中用户</span>getent passwd<span class="token comment">//查看系统中用户组</span>getent group <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="chmod命令"><a href="#chmod命令" class="headerlink" title="chmod命令"></a>chmod命令</h3><blockquote><p>chmod：修改权限控制</p><p>语法：chmod [-R] 权限 文件或文件夹</p><p>注意：</p><p>只有文件、文件夹的所属用户或root用户可以修改</p><p>选项：-R，对文件夹内的全部内容应用同样的操作</p><p><mark>示例：</mark></p><ul><li><p>chmod u=rwx,g=rx,o=x hello.txt，将文件权限修改为：rwxr-x—x</p><ul><li>其中：u表示所属用户权限，g表示所属用户组权限，o表示其他用户权限</li></ul></li><li><p>chmod -R u=rwx,g=rx,o=x test，将文件夹test以及文件夹内全部内容权限设置为rwxr-x—x</p></li></ul><p>权限可以用3位数字来表示，第一位数字表示用户权限，第二位表示用户组权限，第三位表示其他用户权限</p><p><mark>数字细节如下：r记为4，w记为2，x记为1，每个用户权限可以用相加来表示</mark></p><p>如：所属用户有读和写的权限，则可以用4+2=6，用6来表示所属用户的权限以此类推。</p></blockquote><h3 id="chown命令"><a href="#chown命令" class="headerlink" title="chown命令"></a>chown命令</h3><blockquote><p>chown：修改所属用户、用户组</p><p>语法：chown [-R] [用户] [:] [用户组] 文件或文件夹</p><p>注意：</p><p><mark>此命令只适用于root用户</mark></p><p>选项，-R，同chmod，对文件夹内全部内容应用相同规则</p><p>选项，用户，修改所属用户</p><p>选项，用户组，修改所属用户组</p><p>：用于分隔用户和用户组</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//示例</span>chown root hello<span class="token punctuation">.</span>txt<span class="token comment">//将hello.txt所属用户修改为root</span>chown <span class="token operator">:</span>root hello<span class="token punctuation">.</span>txt<span class="token comment">//将hello.txt所属用户组修改为root</span>chown root<span class="token operator">:</span>chen hello<span class="token punctuation">.</span>txt<span class="token comment">//将hello.txt所属用户名修改为root,所属用户组修改为chen</span>chown <span class="token operator">-</span><span class="token class-name">R</span> root test<span class="token comment">//将文件夹test的所属用户修改为root并对文件夹内全部内容应用相同规则</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="systemctl命令"><a href="#systemctl命令" class="headerlink" title="systemctl命令"></a>systemctl命令</h3><blockquote><p>linux系统很多软件（内置或第三方）均支持使用systemctl命令控制：启动、停止、开机自启能够被systemctl管理的软件，一般也称之为：服务</p><p>语法：systemctl start | stop | status | enable | disable 服务名</p><p>注意：</p><p>start：启动</p><p>stop：停止</p><p>status：查看状态</p><p>enable：开启开机自启</p><p>disable：关闭开机自启</p><p>系统内置的服务比较多，比如：</p><p>NetworkManager,主网络服务</p><p>network,副网络服务</p><p>firewalld,防火墙服务</p><p>sshd,ssh服务（FinalShell远程登录Linux使用的就是这个服务）</p><p><mark>部分软件安装后并不会自动集成到systemctl中，我们可以手动添加。</mark></p></blockquote><h3 id="ping命令"><a href="#ping命令" class="headerlink" title="ping命令"></a>ping命令</h3><blockquote><p>ping：检查服务器是否可联通</p><p>语法：ping [-c num] ip或主机名</p><p>注意：</p><ul><li>选项：-c，检查的次数，不使用-c选项，将无限次数持续检查</li><li>参数：ip或主机名，被检查的服务器的ip地址或主机名地址</li></ul></blockquote><h3 id="wget命令"><a href="#wget命令" class="headerlink" title="wget命令"></a>wget命令</h3><blockquote><p>wget：是非交互式的文件下载器，可以在命令行内下载网络文件</p><p>语法：wget [-b] url</p><p>注意：</p><p><mark>不论下载是否完成，都会生成要下载的文件，如果未完成一定要及时删除为下载完成的文件</mark></p><ul><li>选项：-b，可选，后台下载，会将日志写入到当前工作目录的wget-log文件</li><li>参数：url，下载链接</li></ul></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//示例： </span><span class="token comment">//下载apache-hadoop3.3.0版本：</span>wget http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>archive<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>org<span class="token operator">/</span>dist<span class="token operator">/</span>hadoop<span class="token operator">/</span>common<span class="token operator">/</span>hadoop<span class="token operator">-</span><span class="token number">3.3</span><span class="token number">.0</span><span class="token operator">/</span>hadoop<span class="token operator">-</span><span class="token number">3.3</span><span class="token number">.0</span><span class="token punctuation">.</span>tar<span class="token punctuation">.</span>gz<span class="token comment">//在后台下载：</span>wget <span class="token operator">-</span>b  http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>archive<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>org<span class="token operator">/</span>dist<span class="token operator">/</span>hadoop<span class="token operator">/</span>common<span class="token operator">/</span>hadoop<span class="token operator">-</span><span class="token number">3.3</span><span class="token number">.0</span><span class="token operator">/</span>hadoop<span class="token operator">-</span><span class="token number">3.3</span><span class="token number">.0</span><span class="token punctuation">.</span>tar<span class="token punctuation">.</span>gz<span class="token comment">//可以通过tail命令监控后台下载进度</span>tail <span class="token operator">-</span>f wget<span class="token operator">-</span>log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="curl命令"><a href="#curl命令" class="headerlink" title="curl命令"></a>curl命令</h3><blockquote><p>curl：可以发送http网络请求，可用于下载文件、获取信息等</p><p>语法：curl [-0] url</p><p>注意：</p><ul><li>选项：-O，用于下载文件，当url是下载链接时，可以使用此选项保存文件</li><li>参数：url，要发起请求的网络地址</li></ul></blockquote><h3 id="ps命令"><a href="#ps命令" class="headerlink" title="ps命令"></a>ps命令</h3><blockquote><p>ps：通过ps命令查看Linux系统中的进程信息</p><p>语法：ps [-e    -f]</p><p>注意：</p><ul><li>选项：-e，显示出全部的进程</li><li>选项：-f，以完全格式化的形似展示信息（展示全部信息）</li></ul><p>一般来说，固定用法就是：ps -ef列出全部进程的全部信息</p><p>查询信息列表代表含义：</p><ol><li>UID：进程所属的用户ID</li><li>PID：进程的进程号ID</li><li>PPID：进程的父ID（启动此进程的其他进程）</li><li>C：此进程的CPU占用率</li><li>STIME：进程的启动时间</li><li>TTY：启动此进程的终端序号，如显示？，表示非终端启动</li><li>TIME：进程占用CPU时间</li><li>CMD：进程对应的名称或启动路径或启动命令</li></ol><p><mark>可以配合管道符进行使用更快的找到想要看到的进程</mark></p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//理出全部进程的全部信息</span>ps <span class="token operator">-</span>ef<span class="token comment">//列出关于tail的进程</span>ps <span class="token operator">-</span>ef <span class="token operator">|</span> grep tail<span class="token comment">//关闭进程，-9表示强制关闭进程，不适用此选项会向进程发送信号要求其关闭，但是否关闭看进程自身的处理机制</span>kill <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span> 进程<span class="token constant">ID</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="top命令"><a href="#top命令" class="headerlink" title="top命令"></a>top命令</h3><blockquote><p>top：查看CPU、内存使用情况，每5秒刷新一次</p><p>选项：</p><ol><li>-p    只显示某个进程的信息</li><li>-d    设置刷新时间，默认是5s</li><li>-c    显示产生进程的完整命令，默认是进程名</li><li>-n    指定刷新次数，比如top -n 3，刷新输出3次后退出</li><li>-b    以非交互非全屏模式运行，以批次的方式执行top，一般配合-n指定输出几次统计信息，将输出重定向到指定文件，比如 top -b -n 3 &gt; /tmp/top.tmp</li><li>-i    不显示任何闲置（idle）或无用（zombie）的进程</li><li>-u    查找特定用户启动的进程</li></ol><p>信息前5行信息</p><ul><li><p>第一行：</p><p>top:命令名称，当前系统时间，up:启动时间，2 user：2个用户登录，load：1、5、15分钟负载</p></li><li><p>第二行</p><p>Tasks:175 total：175个进程，1 running：1个进程在运行，174 sleeping：174个进程睡眠，0stopped：0个停止进程，0 zombie：0个僵尸进程</p></li><li><p>第三行</p><p>%Cpu(s)：cpu使用率，us：用户cpu使用率，sy：系统cpu使用率，ni：高优先级进程占用cpu时间百分比，id：空闲cpu率，wa：io等待cpu占用率，hi：cpu硬件中断率，si：cpu软件中断率，st：强制等待占用cpu率</p></li><li><p>第四、五行</p><p>Kib Mem：物理内存，total：总量，free：空闲，used：使用，buff/cache：buff和cache占用</p><p>KibSwap：虚拟内存（交换空间），total：总i昂，free：空闲，used：使用，buff/cache：buff和cache占用</p></li></ul></blockquote><h3 id="df命令"><a href="#df命令" class="headerlink" title="df命令"></a>df命令</h3><blockquote><p>df：查看硬盘使用情况</p><p>语法：df [-h]</p><p>注意：</p><ul><li>选项：-h，以更加人性化的单位显示</li></ul></blockquote><h3 id="iostat命令"><a href="#iostat命令" class="headerlink" title="iostat命令"></a>iostat命令</h3><blockquote><p>iostat：查看CPU、磁盘的相关信息</p><p>语法：iostat [-x] [num1] [num2]</p><p>注意：</p><ul><li>选项：-x，显示更多信息</li><li>num1：数字，刷新间隔，num2：数字，刷新几次</li></ul></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//显示cpu、磁盘的更多信息，每隔5秒刷新1次，刷新4次</span>iostat <span class="token operator">-</span>x <span class="token number">5</span> <span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="sar命令"><a href="#sar命令" class="headerlink" title="sar命令"></a>sar命令</h3><blockquote><p>sar：查看网络的相关统计（sar命令非常父子，这里仅简单用于统计网络）</p><p>固定语法：sar -n DEV num1 num2</p><p>注意：</p><ul><li>选项 -n，查看网络，DEV表示查看网络接口</li><li>num1：刷新间隔（不填就查看一次结束），num2：查看次数（不填无限次数）</li></ul><p>信息解读：</p><ul><li>IFACE本地网卡接口名称</li><li>rxpck/s每秒钟接收数据包</li><li>txpck/s没秒钟发送的数据包</li><li><mark>rxKB/S每秒钟接收数据包大小，单位为KB</mark></li><li><mark>txKB/S每秒钟发送的数据包大小，单位为KB</mark></li><li>rxcmp/s每秒钟接收的压缩数据包</li><li>txcmp/s每秒钟发送的压缩包</li><li>rxmcst/s每秒钟接收的多播数据包</li></ul></blockquote><h3 id="rz、sz上传和下载命令"><a href="#rz、sz上传和下载命令" class="headerlink" title="rz、sz上传和下载命令"></a>rz、sz上传和下载命令</h3><blockquote><p><mark>FinalShell可以直接进行拖拽操作，遇到大文件建议直接拖拽</mark></p><p>上传语法：直接输入rz即可</p><p>下载语法：sz 要下载的文件</p><p>注意：</p><p>文件会自动下载到桌面的：fsdownload文件夹中</p></blockquote><h3 id="tar解压缩命令"><a href="#tar解压缩命令" class="headerlink" title="tar解压缩命令"></a>tar解压缩命令</h3><blockquote><p>tar [-c    -v    -x    -f    -z    -C] 参数1 参数2 … 参数N</p><p>注意：</p><ol><li>-c，创建压缩文件，用于压缩模式</li><li>-v，显示压缩、解压过程，用于查看进度</li><li>-x，解压模式</li><li>-f，要创建的文件，或要解压的文件，<mark>-f选项必须在所有选项中位置处于最后一个</mark></li><li>-z，gzip模式，不使用-z就是普通的tarball格式，<mark>一般处于选项位第一个</mark></li><li>-C，选择解压的目的地，用于解压模式，<mark>单独使用，和解压缩所需的其他参数分开</li></ol></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//常用压缩组合</span><span class="token comment">//1.新建压缩文件</span>tar <span class="token operator">-</span>cvf test<span class="token punctuation">.</span>tar <span class="token number">1.</span>txt <span class="token number">2.</span>txt <span class="token number">3.</span>txt<span class="token comment">//将1.txt2.txt3.txt文件压缩成test.tar归档文件</span><span class="token comment">//2.将文件压缩到已有的压缩文件中</span>tar <span class="token operator">-</span>zcvf test<span class="token punctuation">.</span>tar<span class="token punctuation">.</span>gz <span class="token number">1.</span>txt <span class="token number">2.</span>txt <span class="token number">3.</span>txt<span class="token comment">//将1.txt2.txt3.txt压缩到test.tar.gz文件中，使用gzip模式</span><span class="token comment">//常用的解压组合</span><span class="token comment">//1.解压至当前目录</span>tar <span class="token operator">-</span>xvf test<span class="token punctuation">.</span>tar<span class="token comment">//2.解压到指定目录</span>tar <span class="token operator">-</span>xvf test<span class="token punctuation">.</span>tar <span class="token operator">-</span><span class="token class-name">C</span> <span class="token operator">/</span>home<span class="token operator">/</span>chen<span class="token comment">//将test.tar文件解压至/home/chen目录下</span><span class="token comment">//3.以Gzip模式解压.gz文件至指定目录</span>tar<span class="token operator">-</span>zxvf test<span class="token punctuation">.</span>tar<span class="token punctuation">.</span>gz <span class="token operator">-</span><span class="token class-name">C</span> <span class="token operator">/</span>home<span class="token operator">/</span>chen<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="zip压缩命令"><a href="#zip压缩命令" class="headerlink" title="zip压缩命令"></a>zip压缩命令</h3><blockquote><p>zip：压缩文件为zip压缩包</p><p>语法：zip [-r] 参数1 参数2 … 参数N</p><p>注意：</p><ul><li>-r，被压缩的包含文件夹的时候，需要使用-r选项，和rm、cp等命令的-r效果一致</li></ul></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//将文件压缩到已有压缩文件中</span>zip test<span class="token punctuation">.</span>zip a<span class="token punctuation">.</span>txt b<span class="token punctuation">.</span>txt c<span class="token punctuation">.</span>txt<span class="token comment">//将a.txtb.txtc.txt压缩到test.zip文件内</span><span class="token comment">//将文件夹压缩和文件压缩到压缩文件中</span>zip test<span class="token punctuation">.</span>zip test chen a<span class="token punctuation">.</span>txt<span class="token comment">//将test和chen文件夹和a.txt文件压缩到test.zip文件内</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="unzip解压命令"><a href="#unzip解压命令" class="headerlink" title="unzip解压命令"></a>unzip解压命令</h3><blockquote><p>unzip：解压zip压缩包</p><p>语法：unzip [-d] 参数</p><p>注意：</p><ul><li>-d，指定要解压去的位置，同tar的-C选项</li><li>参数，被解压的zip压缩包文件</li></ul></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//解压到当前目录</span>unzip test<span class="token punctuation">.</span>zip<span class="token comment">//将test.zip解压到当前目录</span><span class="token comment">//解压到指定目录</span>unzip test<span class="token punctuation">.</span>zip <span class="token operator">-</span>d <span class="token operator">/</span>home<span class="token operator">/</span>chen<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="scp命令"><a href="#scp命令" class="headerlink" title="scp命令"></a>scp命令</h3><blockquote><p>scp命令是cp命令的升级版，即：ssh cp，通过SSH协议完成文件的复制。</p><p>其主要的功能就是：在不同的Linux服务器之间，通过<code>SSH</code>协议互相传输文件。</p><p>只要知晓服务器的账户和密码（或密钥），即可通过SCP互传文件。</p><p>语法：scp [-r] 参数1 参数2</p><ul><li>-r选项用于复制文件夹使用，如果复制文件夹，必须使用-r</li><li>参数1：本机路径 或 远程目标路径</li><li>参数2：远程目标路径 或 本机路径</li></ul><p>如：<br>scp -r /export/server/jdk root@node2:/export/server/<br>将本机上的jdk文件夹， 以root的身份复制到node2的/export/server/内<br>同SSH登陆一样，账户名可以省略（使用本机当前的同名账户登陆）</p><p>如：<br>scp -r node2:/export/server/jdk /export/server/<br>将远程node2的jdk文件夹，复制到本机的/export/server/内</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># scp命令的高级用法</span><span class="token builtin class-name">cd</span> /export/server<span class="token function">scp</span> <span class="token parameter variable">-r</span> jdk node2:<span class="token variable"><span class="token variable">`</span><span class="token builtin class-name">pwd</span><span class="token variable">`</span></span>/    <span class="token comment"># 将本机当前路径的jdk文件夹，复制到node2服务器的同名路径下</span><span class="token function">scp</span> <span class="token parameter variable">-r</span> jdk node2:<span class="token environment constant">$PWD</span>      <span class="token comment"># 将本机当前路径的jdk文件夹，复制到node2服务器的同名路径下</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="相对路径和绝对路径"><a href="#相对路径和绝对路径" class="headerlink" title="相对路径和绝对路径"></a>相对路径和绝对路径</h2><blockquote><p>绝对路径：以根目录为起点，描述路径的一种写法，路径描述以/开头</p><p>相对路径：以当前目录为起点，描述路径的一种写法，路径描述无需以/开头</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//特殊路径符</span><span class="token number">1</span>、 <span class="token punctuation">.</span>表示当前目录，比如cd <span class="token punctuation">.</span>/<span class="token class-name">Desktop</span>表示切换到当前目录下的<span class="token class-name">Desktop</span>目录内，于cd <span class="token class-name">Desktop</span>一致<span class="token number">2</span>、 <span class="token punctuation">.</span><span class="token punctuation">.</span>表示上一级目录，比如：cd <span class="token punctuation">.</span><span class="token punctuation">.</span>即可切换到上一级目录，cd <span class="token punctuation">.</span><span class="token punctuation">.</span>/<span class="token punctuation">.</span><span class="token punctuation">.</span> 切换到上二级的目录<span class="token number">3</span>、 <span class="token operator">~</span>表示<span class="token constant">HOME</span>目录，比如：cd <span class="token operator">~</span>即可切换到<span class="token constant">HOME</span>目录或cd <span class="token operator">~</span><span class="token operator">/</span><span class="token class-name">Desktop</span>，切换到<span class="token constant">HOME</span>目录内的<span class="token class-name">Desktop</span>目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="反引号"><a href="#反引号" class="headerlink" title="反引号"></a>反引号</h2><blockquote><p>反引号：被反引号（``）包围的内容作为命令去执行</p></blockquote><h2 id="重定向符"><a href="#重定向符" class="headerlink" title="重定向符"></a>重定向符</h2><blockquote><p>“&gt;”：将左侧命令结果，<mark>覆盖</mark>到符号右侧的指定文件中</p><p>“&gt;&gt;”：将左侧命令的结果，<mark>追加</mark>写入到符号右侧的指定的文件中</p><p>示例：</p><p>echo “Hello Linux” &gt;hello.txt</p></blockquote><h2 id="超级管理员"><a href="#超级管理员" class="headerlink" title="超级管理员"></a>超级管理员</h2><blockquote><p>root：超级管理员，具有最大的系统操作权限，普通用户在许多地方的权限是受限的</p><p>举例：</p><p>在根目录下创建文件夹：</p><p>普通用户：无法创建的</p><p>root超级管理员：可以直接创建</p><p>语法：su [-] [用户名]</p><p>注意：</p><p>-：符号是可选的，表示是否在切换用户的同时加载环境变量</p><p>参数：用户名，表示要切换的用户，用户名也可以省略不写，不写默认切换到超级管理员用户</p></blockquote><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">&#x2F;&#x2F;切换超级管理员的命令su - root&#x2F;&#x2F;退出超级管理员exit&#x2F;ctrl+d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="sudo认证"><a href="#sudo认证" class="headerlink" title="sudo认证"></a>sudo认证</h2><blockquote><p>普通用户想要临时使用超级管理员权限执行命令是需要使用sudo命令但是需要输入密码，当完成sudo认证后则可以直接使用sudo命令，不需要使用密码</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//1.切换超级管理员</span>su <span class="token operator">-</span> root<span class="token comment">//2.修改sudoers内容</span>vim <span class="token operator">/</span>etc<span class="token operator">/</span>sudoers<span class="token comment">//3.在文件最后添加如下内容</span>普通用户名 <span class="token constant">ALL</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token constant">ALL</span><span class="token punctuation">)</span><span class="token constant">NOPASSWD</span><span class="token operator">:</span> <span class="token constant">ALL</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="用户和用户组"><a href="#用户和用户组" class="headerlink" title="用户和用户组"></a>用户和用户组</h2><h3 id="用户组管理"><a href="#用户组管理" class="headerlink" title="用户组管理"></a>用户组管理</h3><blockquote><p>以下命令需要root用户执行</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//1.创建用户组</span>groupadd 用户组名<span class="token comment">//2.删除用户组</span>groupdel 用户组名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><blockquote><p>以下命令需要root用户执行</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//1.创建用户</span>useradd <span class="token punctuation">[</span><span class="token operator">-</span>g <span class="token operator">-</span>d<span class="token punctuation">]</span> 用户名<span class="token comment">//选项</span>    <span class="token operator">-</span>g：指定用户的组，不指定<span class="token operator">-</span>g，会创建同名组并自动加入，指定<span class="token operator">-</span>g需要组已经存在，如已存在同名组，必须使用<span class="token operator">-</span>g    <span class="token operator">-</span>d：指定用户<span class="token constant">HOME</span>路径，不指定，<span class="token constant">HOME</span>目录默认在：<span class="token operator">/</span>home<span class="token operator">/</span>用户名<span class="token comment">//2.删除用户</span>userdel <span class="token punctuation">[</span><span class="token operator">-</span>r<span class="token punctuation">]</span> 用户名    <span class="token comment">//选项</span>    <span class="token operator">-</span>r：删除用户的<span class="token constant">HOME</span>目录，不使用<span class="token operator">-</span>r<span class="token punctuation">,</span>删除用户时，<span class="token constant">HOME</span>目录保留<span class="token comment">//3.查看用户所属组</span>id <span class="token punctuation">[</span>用户名<span class="token punctuation">]</span>    <span class="token comment">//选项</span>    参数：用户名，被查看的用户，如果不提供则查看自身<span class="token comment">//4.修改用户所属组</span>usermod <span class="token operator">-</span>aG 用户组 用户名，被指定用户加入指定用户组<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h2><h3 id="yum命令（centos"><a href="#yum命令（centos" class="headerlink" title="yum命令（centos)"></a>yum命令（centos)</h3><blockquote><p>centos系统的软件安装包的格式为.rpm</p><p>yum：RPM包软件管理器，用于自动化安装Linux软件，并可以自动解决依赖问题</p><p>语法：yum [-y] [install | remove |search] 软件名称</p><p>注意：</p><p><mark>yum命令需要root权限，可以su切换到root，或者用sudo提权，且yum命令需要联网</mark></p><ol><li>选项：-y，自动确认，无需手动确认安装或卸载过程</li><li>install：安装</li><li>remove：卸载</li><li>search：搜索</li></ol></blockquote><h3 id="apt命令（Ubuntu）"><a href="#apt命令（Ubuntu）" class="headerlink" title="apt命令（Ubuntu）"></a>apt命令（Ubuntu）</h3><blockquote><p>ubuntu系统的软件安装包格式为.deb</p><p>apt：Ubuntu系统只能装软件使用命令</p><p>语法：apt [-y] [install | remove | search] 软件名称</p><p>注意：</p><p>用法与yum一致，同样需要root权限</p></blockquote><h2 id="软连接"><a href="#软连接" class="headerlink" title="软连接"></a>软连接</h2><blockquote><p>软连接：在系统中创建软连接，可以将文件、文件夹链接到其他位置，类似Windows系统中的快捷方式</p><p>语法：ln -s 参数1 参数2</p><p>注意：</p><ul><li>-s选项，创建软连接</li><li>参数1：被链接的文件或文件夹</li><li>参数2：要链接去的目的地</li></ul></blockquote><h2 id="date命令"><a href="#date命令" class="headerlink" title="date命令"></a>date命令</h2><blockquote><p>通过date查看的日期是不准确的，这是因为：系统默认时区非中国的东八区，<a href="#修改时区">解决方案</a></p><p>date：通过date命令可以在命令行中查看系统的时间</p><p>语法：date [-d] [+格式字符串]</p><p>注意：</p><p><mark>+格式字符串如果有特殊字符如空格的话，用双引号将其整个+格式字符串包裹起来</mark></p><ul><li><p>-d按照给定的字符串显示日期，一般用于日期计算</p><ul><li>可以和格式话字符串配合使用，其中支持的时间标记为：<ul><li>year年</li><li>Month月</li><li>day天</li><li>hour小时</li><li>minute分钟</li><li>second秒</li></ul></li><li>使用方式举例：date -d “+1 day” +%Y%m%d      #显示后一天的日期</li></ul></li><li><p>格式化字符串：通过特定字符串标记，来控制显示的日期格式</p><ul><li>%Y：年</li><li>%y：年份后两位数字（00~99</li><li>%m：月份（01~12）</li><li>%d：日（01~31）</li><li>%H：小时（00~23)</li><li>%M：分钟（00~60）</li><li>%S：秒（00~60）</li><li>%s：自1970-01-01 00:00:00 UTC 到现在的秒数</li></ul></li></ul></blockquote><h2 id="修改时区"><a href="#修改时区" class="headerlink" title="修改时区"></a>修改时区</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//1.使用root权限</span>su root<span class="token comment">//删除系统自带的localtime文件</span>rm <span class="token operator">-</span>f <span class="token operator">/</span>etc<span class="token operator">/</span>localtime<span class="token comment">//软连接连接</span>sudo ln <span class="token operator">-</span>s <span class="token operator">/</span>usr<span class="token operator">/</span>share<span class="token operator">/</span>zoneinfo<span class="token operator">/</span><span class="token class-name">Asia</span><span class="token operator">/</span><span class="token class-name">Shanghai</span> <span class="token operator">/</span>etc<span class="token operator">/</span>localtime<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="时间自动校准"><a href="#时间自动校准" class="headerlink" title="时间自动校准"></a>时间自动校准</h2><blockquote><p>当ntpd启动后会定期的帮助我们联网校准系统时间</p><p>也可以<a href="#手动校准">手动校准</a></p></blockquote><h3 id="自动校准"><a href="#自动校准" class="headerlink" title="自动校准"></a>自动校准</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//1.安装ntp</span>yum <span class="token operator">-</span>y install ntp<span class="token comment">//开启服务</span>systemctl start ntpd<span class="token comment">//设置开机自启</span>systemctl enable ntpd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="手动校准"><a href="#手动校准" class="headerlink" title="手动校准"></a>手动校准</h3><blockquote><p>需要root权限</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">ntpdate <span class="token operator">-</span>u ntp<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com<span class="token comment">//通过阿里云提供的服务网址配合ntpdate(安装ntp后会附带这个命令)命令自动校准</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="IP地址和主机名"><a href="#IP地址和主机名" class="headerlink" title="IP地址和主机名"></a>IP地址和主机名</h2><blockquote><p>IP地址：每一台联网的电脑都会有一个地址，用于和其他计算机进行通讯</p><p>ip地址主要有v4和v6两个版本（主要是v4版本）</p><p>IPv4版本的地址格式是：a.b.c.d，其中abcd表示0~255的数字，如192.16888.101就是一个标准的IP地址</p><p>特殊IP：</p><ul><li>127.0.0.1    这个地址用于指代本机</li><li>0.0.0.0<ul><li>可以指代本机</li><li>可以在<a href="#端口">端口</a>绑定中用来确定绑定关系</li><li><mark>在一些IP地址限制中，表示所有IP的意思</mark>，如放行规则设置为0.0.0.0，表示允许任意IP访问</li></ul></li></ul></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//查看ip地址</span>ifconfig<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="主机名"><a href="#主机名" class="headerlink" title="主机名"></a>主机名</h2><blockquote><p>每一台电脑除了对外联络地址（IP地址）以外还可以有一个名字，称之为主机名，这个是可以自行进行设置的</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//查看系统主机名</span>hostname<span class="token comment">//修改主机名（需root），需改结束重新登录FinalShell即可看到主机名</span>hostnamectl set<span class="token operator">-</span>hostname 主机名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h2><blockquote><p>访问www.baidu.com的流程</p><ol><li>访问www.baidu.com</li><li>首先会检查本地记录（私人地址本）<ul><li>Windows：C:\Windows\System32\drivers\hosts</li><li>Linux：/etc/hosts</li></ul></li><li>若不过本地没有会联网询问公开的DNS服务器是否有记录www.baidu.com的地址</li></ol></blockquote><h2 id="虚拟机固定IP"><a href="#虚拟机固定IP" class="headerlink" title="虚拟机固定IP"></a>虚拟机固定IP</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//1. 打开编辑中的虚拟网络编辑器</span><span class="token comment">//2.点击右下角的更改设置按钮</span><span class="token comment">//3.选中名称为VMnet8类型为NAT模式</span><span class="token comment">//4.修改子网IP:192.168.x.0，子网掩码为255.255.255.0</span><span class="token comment">//5.点击NAT设置</span><span class="token comment">//6.修改网关为192.168.X.2</span><span class="token comment">//7.开启虚拟机</span><span class="token comment">//8.使用root权限</span>su root<span class="token comment">//9.修改指定文件内容</span>vi <span class="token operator">/</span>etc<span class="token operator">/</span>sysconfig<span class="token operator">/</span>network<span class="token operator">-</span>scripts<span class="token operator">/</span>ifcfg<span class="token operator">-</span>ens33<span class="token comment">//10.修改内容：需要跟虚拟网络编辑器中匹配</span><span class="token constant">BOOTPROTO</span><span class="token operator">=</span><span class="token string">"static"</span><span class="token constant">IPADDR</span><span class="token operator">=</span><span class="token string">"192.168.X.X"</span><span class="token comment">//输入你想要设置的ip</span><span class="token constant">NETMASK</span><span class="token operator">=</span><span class="token string">"255.255.255.0"</span><span class="token comment">//子网掩码</span><span class="token constant">GATEWAY</span><span class="token operator">=</span><span class="token string">"192.168.X.2"</span><span class="token comment">//网关</span><span class="token constant">DNS1</span><span class="token operator">=</span><span class="token string">"192.168.X.2"</span><span class="token comment">//与网关一致即可</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ul><li></li></ul></blockquote><h2 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h2><blockquote><p>端口：是设备与外界通讯交流的出入口。端口可以分为物理端口和虚拟端口两类</p><ul><li>物理端口：又可称之为接口，是可见的端口，如USB接口RJ45网口，HDMI端口等</li><li>虚拟端口：是指计算机内部的端口，是不可见的，用来操作系统和外部进行交互使用的<ul><li>举例：当两台主机想要联通只需要知道ip地址即可，但是当想要锁定计算机上具体程序，确保程序之间沟通则是使用端口。</li></ul></li></ul><p><mark>IP地址相当于小区地址，在小区内又可以有许多住户（程序），而门牌号（端口）就是各个住户（程序）的联系地址</mark></p><p>Linux系统是一个超大号小区，可以支持65535个端口，这6万多个端口分为三类使用：</p><ul><li>公认端口：1~1023，通常用于一些系统内置或知名程序的预留，如SSH服务的22端口，HTTPS服务的443端口，非特殊需要，不要占用这个范围的端口</li><li>注册端口：1024~49151，通常可以随意使用，用于松散的绑定一些程序/服务</li><li>动态端口：49152~65535，通常不会固定绑定程序，而是当程序对外进行网络链接时，用于临时使用。<ul><li>举例：当计算机A的微信连接计算机B的微信，A使用的50001即为动态端口，临时找一个端口作为出口，计算机B的微信使用端口5678，即注册端口，长期绑定此端口等待别人连接</li></ul></li></ul></blockquote><h3 id="nmap命令"><a href="#nmap命令" class="headerlink" title="nmap命令"></a>nmap命令</h3><blockquote><p>nmap：扫描ip地址对外暴露的端口</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//查看端口占用情况</span>nmap 被查看的ip地址<span class="token comment">//安装nmap</span>yum <span class="token operator">-</span>y install nmap<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="netstat命令"><a href="#netstat命令" class="headerlink" title="netstat命令"></a>netstat命令</h3><blockquote><p>netstat：查看指定端口的占用情况</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//查看指定端口的占用情况</span>netstat <span class="token operator">-</span>anp <span class="token operator">|</span> grep 端口号<span class="token comment">//安装netstat</span>yum <span class="token operator">-</span>y install net<span class="token operator">-</span>tools<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><h3 id="查看环境变量"><a href="#查看环境变量" class="headerlink" title="查看环境变量"></a>查看环境变量</h3><blockquote><p>一些命令如cd可以在任何地方执行就是因为配置了环境变量，当输入命令点击回车时，系统会优先从环境变量配置的几个文件夹下查找，查找到即可直接拿来执行</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//查看环境变量</span>env <span class="token operator">|</span> grep <span class="token constant">PATH</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="符号"><a href="#符号" class="headerlink" title="$符号"></a>$符号</h3><blockquote><p>$配合echo可以用来取“变量”的值</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//使用echo和$符号打印出PATH变量的值</span>echo $<span class="token constant">PATH</span><span class="token comment">//在输出内容后拼接ABC</span>echo $<span class="token punctuation">&#123;</span><span class="token constant">PATH</span><span class="token punctuation">&#125;</span><span class="token constant">ABC</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="自行设置环境变量"><a href="#自行设置环境变量" class="headerlink" title="自行设置环境变量"></a>自行设置环境变量</h3><blockquote><ul><li><p>临时设置：</p><p>语法：export 变量名=变量值</p></li><li><p>永久生效</p><ul><li>针对当前用户生效，配置在当前用户的：~/.bashrc文件中</li><li>针对所有用户生效，配置在系统的：/etc/profile文件中</li><li>并通过语法：souce配置文件，进行立刻生效，或重新登录FinalShell </li></ul></li></ul></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//设置临时环境变量</span>export <span class="token constant">MYNAME</span><span class="token operator">=</span>chen<span class="token comment">//设置永久环境变量，以当前用户生效的情况为例</span><span class="token number">1.</span>vi <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>bashrc<span class="token number">2.</span>在最后插入 export <span class="token constant">MYNAME</span><span class="token operator">=</span>chen<span class="token number">3.</span>保存退出后输入source <span class="token punctuation">.</span>bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="部署MySQL数据库管理系统"><a href="#部署MySQL数据库管理系统" class="headerlink" title="部署MySQL数据库管理系统"></a>部署MySQL数据库管理系统</h2><blockquote><p>主要版本：</p><ul><li>MySQL 5.7版本安装</li><li>MySQL 8.x版本安装</li></ul></blockquote><h3 id="5-7版本MySQL安装配置"><a href="#5-7版本MySQL安装配置" class="headerlink" title="5.7版本MySQL安装配置"></a>5.7版本MySQL安装配置</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><ol><li><p>配置yum仓库</p><blockquote><p>由于MySQL并不在CentOS的官方仓库中，所以我们通过下面rpm命令：</p><ul><li>导入MySQL仓库密钥</li><li>配置MySQL的yum仓库</li></ul></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#更新密钥</span><span class="token function">rpm</span> <span class="token parameter variable">--import</span> https://repo.mysql.com/RPM-GPG-KEY-mysql-2022<span class="token comment">#安装Mysql yum库</span><span class="token function">rpm</span> <span class="token parameter variable">-Uvh</span> http://repo.mysql.com//mysql57-community-release-el7-7.noarch.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用yum安装MySQL</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#yum安装Mysql</span>yum <span class="token parameter variable">-y</span> <span class="token function">install</span> mysql-community-server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>启动MySQL并配置开机自启动</p><blockquote><p>MySQL安装完成后，会自动配置名为：mysqld的服务，可以被systemctl所管理</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl start mysqld<span class="token comment">#启动</span>systemctl <span class="token builtin class-name">enable</span> mysqld<span class="token comment">#开机自启</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>查看MySQL的运行状态</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl status mysqld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><ol><li><p>获取MySQL的初始密码</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#通过grep命令，在/var/log/mysqld.log文件中，过滤temporary password关键字，得到初始密码</span><span class="token function">cat</span> /var/log/mysqld.log <span class="token operator">|</span> <span class="token function">grep</span> "temporary password“<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>登录MySQL数据库系统</p><blockquote><p>-u，登录的用户，MySQL数据库的管理员用户同Linux一样，是root</p><p>-p，表示使用密码登录</p><p>执行完毕后输入上一步得到的初始密码即可进入MySQL数据库</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#执行</span>mysql <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-p</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>修改root用户密码</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#在MySQL控制台内执行</span>ALTER <span class="token environment constant">USER</span> <span class="token string">'root'</span>@<span class="token string">'localhost'</span> IDENTIFIED BY <span class="token string">'密码'</span><span class="token punctuation">;</span>-- 密码需要符合：大于8位，有大写字母，有特殊符号，不能是连续简单语句如123，abc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>配置root的简单密码</p><blockquote><p>我们可以给root设置简单密码，如123456.</p><p>注意：</p><p>此配置仅仅用于测试学习环境的MySQL，如果是正式使用，请勿设置简单密码</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#如果想要设置简单密码，需要降低Mysql密码的安全级别</span><span class="token builtin class-name">set</span> global <span class="token assign-left variable">validate_password_policy</span><span class="token operator">=</span>LOW<span class="token punctuation">;</span><span class="token comment">#密码安全级别低</span><span class="token builtin class-name">set</span> global <span class="token assign-left variable">validate_password_length</span><span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span><span class="token comment">#密码成都最低4位即可</span><span class="token comment">#然后就可以用简单密码了</span>ALTER <span class="token environment constant">USER</span> <span class="token string">'root'</span>@<span class="token string">'localhost'</span> IDENTIFIED BY <span class="token string">'简单密码'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置root远程登录</p><blockquote><p>默认情况下，root用户是不运行远程登陆的，只允许在MySQL所在的Linux服务器登录MySQL系统</p><p>注意：</p><p><mark>允许root远程登录会带来安全风险</mark></p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#授权root远程登录</span>grant all privileges on *.* to root@<span class="token string">"IP地址"</span> identified by <span class="token string">'密码'</span> with grant option<span class="token punctuation">;</span><span class="token comment">#IP地址即为允许登录的IP地址，也可以填写%，表示允许任何地址</span><span class="token comment">#密码表示给远程登录独立设置密码，和本地登录的密码可以不同</span><span class="token comment">#刷新权限，生效</span>flush privileges<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>退出MySQL控制台页面</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#退出命令</span><span class="token builtin class-name">exit</span><span class="token comment">#或者通过快捷键退出：ctrl + d</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>检查端口</p><blockquote><p>MySQL默认端口3306端口，可以通过端口占用检查MySQL的网络状态</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">netstat</span> <span class="token parameter variable">-anp</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token number">3306</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="8-0版本MySQL安装配置"><a href="#8-0版本MySQL安装配置" class="headerlink" title="8.0版本MySQL安装配置"></a>8.0版本MySQL安装配置</h3><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><ol><li><p>配置yum仓库</p><blockquote><p>由于MySQL并不在CentOS的官方仓库中，所以我们通过下面rpm命令：</p><ul><li>导入MySQL仓库密钥</li><li>配置MySQL的yum仓库</li></ul></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#更新密钥</span><span class="token function">rpm</span> <span class="token parameter variable">--import</span> https://repo.mysql.com/RPM-GPG-KEY-mysql-2022<span class="token comment">#安装Mysql yum库</span><span class="token function">rpm</span> <span class="token parameter variable">-Uvh</span> http://dev.mysql.com/get/mysql80-community-release-el7-2.noarch.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用yum安装MySQL</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#yum安装Mysql</span>yum <span class="token parameter variable">-y</span> <span class="token function">install</span> mysql-community-server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>启动MySQL并配置开机自启动</p><blockquote><p>MySQL安装完成后，会自动配置名为：mysqld的服务，可以被systemctl所管理</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl start mysqld<span class="token comment">#启动</span>systemctl <span class="token builtin class-name">enable</span> mysqld<span class="token comment">#开机自启</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>查看MySQL的运行状态</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl status mysqld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h4 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h4><ol><li><p>获取MySQL的初始密码</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#通过grep命令，在/var/log/mysqld.log文件中，过滤temporary password关键字，得到初始密码</span><span class="token function">cat</span> /var/log/mysqld.log <span class="token operator">|</span> <span class="token function">grep</span> "temporary password“<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>登录MySQL数据库系统</p><blockquote><p>-u，登录的用户，MySQL数据库的管理员用户同Linux一样，是root</p><p>-p，表示使用密码登录</p><p>执行完毕后输入上一步得到的初始密码即可进入MySQL数据库</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#执行</span>mysql <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-p</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>修改root用户密码</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#在MySQL控制台内执行</span><span class="token keyword">ALTER</span> <span class="token keyword">USER</span> <span class="token string">'root'</span><span class="token variable">@'localhost'</span> IDENTIFIED <span class="token keyword">WITH</span> mysql_native_password <span class="token keyword">BY</span> <span class="token string">'密码'</span><span class="token punctuation">;</span><span class="token comment">-- 密码需要符合：大于8位，有大写字母，有特殊符号，不能是连续简单语句如123，abc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>配置root的简单密码</p><blockquote><p>我们可以给root设置简单密码，如123456.</p><p>注意：</p><p>此配置仅仅用于测试学习环境的MySQL，如果是正式使用，请勿设置简单密码</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#如果想要设置简单密码，需要降低Mysql密码的安全级别</span><span class="token keyword">set</span> <span class="token keyword">global</span> validate_password_policy<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">#密码安全级别低</span><span class="token keyword">set</span> <span class="token keyword">global</span> validate_password_length<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span><span class="token comment">#密码成都最低4位即可</span><span class="token comment">#然后就可以用简单密码了</span><span class="token keyword">ALTER</span> <span class="token keyword">USER</span> <span class="token string">'root'</span><span class="token variable">@'localhost'</span> IDENTIFIED <span class="token keyword">WITH</span> mysql_native_password <span class="token keyword">BY</span> <span class="token string">'密码'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置root远程登录</p><blockquote><p>默认情况下，root用户是不运行远程登陆的，只允许在MySQL所在的Linux服务器登录MySQL系统</p><p>注意：</p><p><mark>允许root远程登录会带来安全风险</mark></p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#第一次授权root远程登录</span><span class="token keyword">create</span> <span class="token keyword">user</span> <span class="token string">'root'</span><span class="token variable">@'%/IP地址'</span> IDENTIFIED <span class="token keyword">WITH</span> mysql_native_password <span class="token keyword">BY</span> <span class="token string">'密码'</span>；<span class="token comment">#IP地址即为允许登录的IP地址，也可以填写%，表示允许任何地址</span><span class="token comment">#密码表示给远程登录独立设置密码，和本地登录的密码可以不同</span><span class="token comment">#后续修改密码使用如下SQL命令</span><span class="token keyword">ALTER</span> <span class="token keyword">USER</span> <span class="token string">'root'</span><span class="token variable">@'%/IP地址'</span> IDENTIFIED <span class="token keyword">WITH</span> mysql_native_password <span class="token keyword">BY</span> <span class="token string">'密码'</span>；<span class="token comment">#刷新权限，生效</span>flush <span class="token keyword">privileges</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>退出MySQL控制台页面</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#退出命令</span><span class="token builtin class-name">exit</span><span class="token punctuation">;</span><span class="token comment">#或者通过快捷键退出：ctrl + d</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>检查端口</p><blockquote><p>MySQL默认端口3306端口，可以通过端口占用检查MySQL的网络状态</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">netstat</span> <span class="token parameter variable">-anp</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token number">3306</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="tomcat安装部署"><a href="#tomcat安装部署" class="headerlink" title="tomcat安装部署"></a>tomcat安装部署</h2><blockquote><p>tomcat版本：10.0.2</p><p>JDK版本：8u351或更高</p></blockquote><h3 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h3><h4 id="安装部署JDK环境"><a href="#安装部署JDK环境" class="headerlink" title="安装部署JDK环境"></a>安装部署JDK环境</h4><ol><li><p>下载JDK软件</p><p><a href="https://www.oracle.com/java/technologies/downloads找到对应版本下载">https://www.oracle.com/java/technologies/downloads找到对应版本下载</a></p></li><li><p>登录Linux系统，切换到root用户</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">su</span> -<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>通过FinalShell，上传下载好的JDK安装包<a href="#rz、sz上传和下载命令">解决办法</a></p></li><li><p>创建文件夹，用来部署JDK；将JDK和Tomcat都安装部署到：/export/server内</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /export/server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>解压缩JDK安装文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> jdk-8u351-linux-x64.tar.gz <span class="token parameter variable">-C</span> /export/server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>配置JDK软连接</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ln</span> <span class="token parameter variable">-s</span> /export/server/jdk1.8.0_351 /export/server/jdk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>配置JAVA_HOME环境变量，以及将$JAVA_HOME/bin文件夹加入PATH环境变量中</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#编辑/etc/profile文件</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span>/export/server/jdk<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">$JAVA_HOME</span>/bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>生效环境变量</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>配置java执行程序的软链接</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#删除系统自带的Java程序</span><span class="token function">rm</span> <span class="token parameter variable">-f</span> /usr/bin/java<span class="token comment">#建立软链接将想要使用的jdk版本指向/usr/bin/java</span><span class="token function">ln</span> <span class="token parameter variable">-s</span> /export/server/jdk/bin/java /usr/bin/java<span class="token comment">#验证是否可以在随意位置查看版本</span><span class="token function">java</span> <span class="token parameter variable">-version</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="安装部署Tomcat"><a href="#安装部署Tomcat" class="headerlink" title="安装部署Tomcat"></a>安装部署Tomcat</h4><blockquote><p>Tomcat建议使用非root用户安装并启动</p><p>可以创建一个用户：tomcat用以部署</p></blockquote><ol><li><p>首先，放行tomcat需要使用的8080端口的外部访问权限</p><blockquote><p>CenOS系统默认开启防火墙，阻止外部网络流量访问系统内部</p><p>所以如果想要Tomcat可以正常使用，需要对Tomcat默认使用的8080端口进行放行</p><p>放行的2种方式</p><ol><li>关闭防火墙</li><li>配置防火墙规则，放行端口</li></ol></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#方式1：关闭防火墙</span>systemctl stop firewalldsystemctl disable firewalld<span class="token comment">#方式2：放行8080端口的外部访问</span>firewall-cmd --add-port<span class="token operator">=</span><span class="token number">8080</span>/tcp <span class="token parameter variable">--permanent</span><span class="token comment">#--add-port=8080/tcp表示放行8080端口的tcp访问，--permanent表示永久生效</span>firewall-cmd <span class="token parameter variable">--reload</span><span class="token comment">#重新载入防火墙规则使其生效</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>方便起见，建议选择方式1，直接关闭防火墙一劳永逸</p></blockquote></li><li><p>以root用户操作，创建tomcat用户</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#以root用户操作</span><span class="token function">useradd</span> tomcat<span class="token comment">#可选，为tomcat用户配置密码,避免被外人拿到root最高权限</span><span class="token function">passwd</span> tomcat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>下载Tomcat安装包</p><blockquote><p><mark>下载链接需要自己进入网站复制，进入<a href="https://dlcdn.apache.org/tomcat/找到想要下载的版本复制链接替换">https://dlcdn.apache.org/tomcat/找到想要下载的版本复制链接替换</a></mark></p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#使用tomcat用户操作</span><span class="token function">wget</span> https://dlcdn.apache.org/tomcat/tomcat-10/v10.0.27/bin/apache-tomcat-10.0.27.tar.gz<span class="token comment">#如果出现https相关错误可以使用--no-check-certificate选项,如：ERROR: cannot verify dlcdn.apache.org's certificate, issued by ‘/C=US/O=Let's Encrypt/CN=R3’:Issued certificate has expired.</span><span class="token function">wget</span> --no-check-certificate https://dlcdn.apache.org/tomcat/tomcat-10/v10.0.27/bin/apache-tomcat-10.0.27.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>解压Tomcat安装包</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#使用root用户操作，否则无权限解压到/export/server内，除非修改此文件夹权限首先要先找到文件所在位置</span><span class="token builtin class-name">cd</span> /home/tomcat/<span class="token comment">#然后解压文件到/export/server</span><span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> apache-tomcat-10.0.27.tar.gz <span class="token parameter variable">-C</span> /export/server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建Tomcat软链接</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#使用root用户操作</span><span class="token function">ln</span> <span class="token parameter variable">-s</span> /export/server/apache-tomcat-10.0.27 /export/server/tomcat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>修改tomcat安装目录权限</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#使用root用户操作，同时对软链接和tomcat安装文件夹进行修改，使用通配符*进行匹配</span><span class="token function">chown</span> <span class="token parameter variable">-R</span> tomcat:tomcat /exort/export/server/*tomcat*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>启动到tomcat用户</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">su</span> - tomcat<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>启动tomcat</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/export/server/tomcat/bin/startup.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><ol><li><p>tomcat启动在8080端口，可以检查是否正常启动</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">netstat</span> <span class="token parameter variable">-anp</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token number">8080</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="Nginx安装部署"><a href="#Nginx安装部署" class="headerlink" title="Nginx安装部署"></a>Nginx安装部署</h2><h3 id="安装-3"><a href="#安装-3" class="headerlink" title="安装"></a>安装</h3><blockquote><p>需要配置额外的yum仓库，才可以使用yum安装</p><p>安装需要root身份</p></blockquote><ol><li><p>安装yum依赖程序</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#root执行</span>yum <span class="token function">install</span> <span class="token parameter variable">-y</span> yum-utils<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>手动添加，nginx的yum仓库</p><p>yum程序使用的仓库配置文件，存放在：<mark>/etc/yum.repo.d内</mark></p><blockquote><p>通过以下操作，我们手动添加了nginx的yum仓库</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># root执行</span><span class="token comment"># 创建文件使用vim编辑</span><span class="token function">vim</span> /etc/yum.repos.d/nginx.repo<span class="token comment"># 填入如下内容并保存退出</span><span class="token punctuation">[</span>nginx-stable<span class="token punctuation">]</span><span class="token assign-left variable">name</span><span class="token operator">=</span>nginx stable repo<span class="token assign-left variable">baseurl</span><span class="token operator">=</span>http://nginx.org/packages/centos/<span class="token variable">$releasever</span>/<span class="token variable">$basearch</span>/<span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">enabled</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">gpgkey</span><span class="token operator">=</span>https://nginx.org/keys/nginx_signing.key<span class="token assign-left variable">module_hotfixes</span><span class="token operator">=</span>true<span class="token punctuation">[</span>nginx-mainline<span class="token punctuation">]</span><span class="token assign-left variable">name</span><span class="token operator">=</span>nginx mainline repo<span class="token assign-left variable">baseurl</span><span class="token operator">=</span>http://nginx.org/packages/mainline/centos/<span class="token variable">$releasever</span>/<span class="token variable">$basearch</span>/<span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">enabled</span><span class="token operator">=</span><span class="token number">0</span><span class="token assign-left variable">gpgkey</span><span class="token operator">=</span>https://nginx.org/keys/nginx_signing.key<span class="token assign-left variable">module_hotfixes</span><span class="token operator">=</span>true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>通过yum安装最新稳定版的nginx</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#root执行</span>yum <span class="token function">install</span> <span class="token parameter variable">-y</span> nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>启动</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># nginx自动注册了systemctl系统服务</span>systemctl start nginx<span class="token comment"># 启动</span>systemctl stop nginx<span class="token comment"># 停止</span>systemctl status nginx<span class="token comment"># 运行状态</span>systemctl <span class="token builtin class-name">enable</span> nginx<span class="token comment"># 开机自启</span>systemctl disable nginx<span class="token comment"># 关闭开机自启</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置防火墙放行</p><blockquote><p>nginx默认绑定80端口，可根据tomcat中防火墙放行方式自行配置</p></blockquote></li><li><p>启动后浏览器输入Linux服务器的IP地址或主机名可访问</p><blockquote><p>访问方式：<a href="http://192.168.88.128">http://192.168.88.128</a></p><p><mark>80端口是访问网站的默认端口，所以后面无需跟随端口号</mark></p></blockquote></li></ol><h2 id="RabbitMQ安装部署"><a href="#RabbitMQ安装部署" class="headerlink" title="RabbitMQ安装部署"></a>RabbitMQ安装部署</h2><h3 id="安装-4"><a href="#安装-4" class="headerlink" title="安装"></a>安装</h3><blockquote><p>rabbitmq在yum仓库中的版本较老，所以需要手动构建yum仓库</p></blockquote><ol><li><p>准备yum仓库</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#root执行</span><span class="token comment">#1.主备gpgkey密钥</span><span class="token function">rpm</span> <span class="token parameter variable">--import</span> https://github.com/rabbitmq/signing-keys/releases/download/2.0/rabbitmq-release-signing-key.asc<span class="token function">rpm</span> <span class="token parameter variable">--import</span> https://packagecloud.io/rabbitmq/erlang/gpgkey<span class="token function">rpm</span> <span class="token parameter variable">--import</span> https://packagecloud.io/rabbitmq/rabbitmq-server/gpgkey<span class="token comment">#2.准备仓库文件</span><span class="token function">vim</span> /etc/yum.repos.d/rabbitmq.repo<span class="token comment">#填写如下内容</span><span class="token comment">##</span><span class="token comment">## Zero dependency Erlang</span><span class="token comment">##</span><span class="token punctuation">[</span>rabbitmq_erlang<span class="token punctuation">]</span><span class="token assign-left variable">name</span><span class="token operator">=</span>rabbitmq_erlang<span class="token assign-left variable">baseurl</span><span class="token operator">=</span>https://packagecloud.io/rabbitmq/erlang/el/7/<span class="token variable">$basearch</span><span class="token assign-left variable">repo_gpgcheck</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">enabled</span><span class="token operator">=</span><span class="token number">1</span><span class="token comment"># PackageCloud&amp;apos;s repository key and RabbitMQ package signing key</span><span class="token assign-left variable">gpgkey</span><span class="token operator">=</span>https://packagecloud.io/rabbitmq/erlang/gpgkey       https://github.com/rabbitmq/signing-keys/releases/download/2.0/rabbitmq-release-signing-key.asc<span class="token assign-left variable">sslverify</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">sslcacert</span><span class="token operator">=</span>/etc/pki/tls/certs/ca-bundle.crt<span class="token assign-left variable">metadata_expire</span><span class="token operator">=</span><span class="token number">300</span><span class="token punctuation">[</span>rabbitmq_erlang-source<span class="token punctuation">]</span><span class="token assign-left variable">name</span><span class="token operator">=</span>rabbitmq_erlang-source<span class="token assign-left variable">baseurl</span><span class="token operator">=</span>https://packagecloud.io/rabbitmq/erlang/el/7/SRPMS<span class="token assign-left variable">repo_gpgcheck</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">0</span><span class="token assign-left variable">enabled</span><span class="token operator">=</span><span class="token number">1</span><span class="token comment"># PackageCloud&amp;apos;s repository key and RabbitMQ package signing key</span><span class="token assign-left variable">gpgkey</span><span class="token operator">=</span>https://packagecloud.io/rabbitmq/erlang/gpgkey       https://github.com/rabbitmq/signing-keys/releases/download/2.0/rabbitmq-release-signing-key.asc<span class="token assign-left variable">sslverify</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">sslcacert</span><span class="token operator">=</span>/etc/pki/tls/certs/ca-bundle.crt<span class="token assign-left variable">metadata_expire</span><span class="token operator">=</span><span class="token number">300</span><span class="token comment">##</span><span class="token comment">## RabbitMQ server</span><span class="token comment">##</span><span class="token punctuation">[</span>rabbitmq_server<span class="token punctuation">]</span><span class="token assign-left variable">name</span><span class="token operator">=</span>rabbitmq_server<span class="token assign-left variable">baseurl</span><span class="token operator">=</span>https://packagecloud.io/rabbitmq/rabbitmq-server/el/7/<span class="token variable">$basearch</span><span class="token assign-left variable">repo_gpgcheck</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">0</span><span class="token assign-left variable">enabled</span><span class="token operator">=</span><span class="token number">1</span><span class="token comment"># PackageCloud&amp;apos;s repository key and RabbitMQ package signing key</span><span class="token assign-left variable">gpgkey</span><span class="token operator">=</span>https://packagecloud.io/rabbitmq/rabbitmq-server/gpgkey       https://github.com/rabbitmq/signing-keys/releases/download/2.0/rabbitmq-release-signing-key.asc<span class="token assign-left variable">sslverify</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">sslcacert</span><span class="token operator">=</span>/etc/pki/tls/certs/ca-bundle.crt<span class="token assign-left variable">metadata_expire</span><span class="token operator">=</span><span class="token number">300</span><span class="token punctuation">[</span>rabbitmq_server-source<span class="token punctuation">]</span><span class="token assign-left variable">name</span><span class="token operator">=</span>rabbitmq_server-source<span class="token assign-left variable">baseurl</span><span class="token operator">=</span>https://packagecloud.io/rabbitmq/rabbitmq-server/el/7/SRPMS<span class="token assign-left variable">repo_gpgcheck</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">0</span><span class="token assign-left variable">enabled</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">gpgkey</span><span class="token operator">=</span>https://packagecloud.io/rabbitmq/rabbitmq-server/gpgkey<span class="token assign-left variable">sslverify</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">sslcacert</span><span class="token operator">=</span>/etc/pki/tls/certs/ca-bundle.crt<span class="token assign-left variable">metadata_expire</span><span class="token operator">=</span><span class="token number">300</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>安装RabbitMQ</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#root执行安装erlang和rabbitmq</span>yum <span class="token function">install</span> <span class="token parameter variable">-y</span> erlang rabbitmq-server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>启动</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># root执行</span><span class="token comment"># 使用systemctl管控，服务名：rabbitmq-server</span>systemctl <span class="token builtin class-name">enable</span> rabbitmq-server<span class="token comment"># 开机自启</span>systemctl disable rabbitmq-server<span class="token comment"># 关闭开机自启</span>systemctl start rabbitmq-server<span class="token comment"># 启动</span>systemctl stop rabbitmq-server<span class="token comment"># 关闭</span>systemctl status rabbitmq-server<span class="token comment"># 查看状态</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>放行防火墙，RabbitMQ使用5672、15672、25672这3个端口</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 方式1（推荐），关闭防火墙</span>systemctl stop firewalld<span class="token comment"># 关闭</span>systemctl disable firewalld<span class="token comment"># 关闭开机自启</span><span class="token comment"># 方式2，放行5672 25672端口</span>firewall-cmd --add-port<span class="token operator">=</span><span class="token number">5672</span>/tcp <span class="token parameter variable">--permanent</span><span class="token comment"># 放行tcp规则下的5672端口，永久生效</span>firewall-cmd --add-port<span class="token operator">=</span><span class="token number">15672</span>/tcp <span class="token parameter variable">--permanent</span><span class="token comment"># 放行tcp规则下的15672端口，永久生效</span>firewall-cmd --add-port<span class="token operator">=</span><span class="token number">25672</span>/tcp <span class="token parameter variable">--permanent</span><span class="token comment"># 放行tcp规则下的25672端口，永久生效</span>firewall-cmd <span class="token parameter variable">--reload</span><span class="token comment"># 重新加载防火墙规则</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>启动RabbitMQ的WEB管理控制台</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rabbitmq-plugins <span class="token builtin class-name">enable</span> rabbitmq_management<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>添加admin用户，并赋予权限</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rabbitmqctl add_user admin <span class="token string">'12345'</span><span class="token punctuation">;</span><span class="token comment">#配置用户及密码密码</span>rabbitmqctl set_permissions <span class="token parameter variable">-p</span> <span class="token string">"/"</span> <span class="token string">"admin"</span> <span class="token string">".*"</span> <span class="token string">".*"</span> <span class="token string">".*"</span><span class="token comment">#配置权限，此时是最大权限</span>rabbitmqctl set_user_tags admin administrator<span class="token comment">#设置标签</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>浏览器打开管理控制台</p><blockquote><p><a href="http://192.168.88.128:15672">http://192.168.88.128:15672</a></p></blockquote></li></ol><h2 id="Redis安装部署"><a href="#Redis安装部署" class="headerlink" title="Redis安装部署"></a>Redis安装部署</h2><h3 id="安装-5"><a href="#安装-5" class="headerlink" title="安装"></a>安装</h3><ol><li><p>配置EPEL仓库</p><blockquote><p>EPEL 的全称叫 Extra Packages for Enterprise Linux 。EPEL是由 Fedora 社区打造，为 RHEL 及衍生发行版如 CentOS、Scientific Linux 等提供高质量软件包的项目。装上了 EPEL之后，就相当于添加了一个第三方源。EPEL则为服务器版本提供大量的rpm包(yum程序所使用的程序安装包，类似Windows的exe)，而且大多数rpm包在官方 repository 中是找不到的。</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#root执行</span>yum <span class="token function">install</span> <span class="token parameter variable">-y</span> epel-release<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>安装redis</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#root执行</span>yum <span class="token function">install</span> <span class="token parameter variable">-y</span> redis<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>启动redis</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># root执行</span><span class="token comment"># 使用systemctl管控，服务名：redis</span>systemctl <span class="token builtin class-name">enable</span> redis<span class="token comment"># 开机自启</span>systemctl disable redis<span class="token comment"># 关闭开机自启</span>systemctl start redis<span class="token comment"># 启动</span>systemctl stop redis<span class="token comment"># 关闭</span>systemctl status redis<span class="token comment"># 查看状态</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>放行防火墙，redis使用端口号6379</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 方式1（推荐），关闭防火墙</span>systemctl stop firewalld<span class="token comment"># 关闭</span>systemctl disable firewalld<span class="token comment"># 关闭开机自启</span><span class="token comment"># 方式2，放行6379端口</span>firewall-cmd --add-port<span class="token operator">=</span><span class="token number">6379</span>/tcp <span class="token parameter variable">--permanent</span><span class="token comment"># 放行tcp规则下的6379端口，永久生效</span>firewall-cmd <span class="token parameter variable">--reload</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>进入redis服务</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#执行redis-cli</span><span class="token punctuation">[</span>root@centos ~<span class="token punctuation">]</span><span class="token comment"># redis-cli</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span>: <span class="token builtin class-name">set</span> mykey helloOK<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span>: get mykey<span class="token string">"hello"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="ElasticSearch安装部署"><a href="#ElasticSearch安装部署" class="headerlink" title="ElasticSearch安装部署"></a>ElasticSearch安装部署</h2><blockquote><p><a href="https://baike.baidu.com/item/全文搜索引擎">全文搜索</a>属于最常见的需求，开源的 <a href="https://www.elastic.co/">Elasticsearch</a> （以下简称 es）是目前全文搜索引擎的首选。</p><p>它可以快速地储存、搜索和分析海量数据。维基百科、Stack Overflow、Github 都采用它。</p><p>Elasticsearch简称es，在企业内同样是一款应用非常广泛的搜索引擎服务。</p><p>很多服务中的搜索功能，都是基于es来实现的。</p></blockquote><h3 id="安装-6"><a href="#安装-6" class="headerlink" title="安装"></a>安装</h3><ol><li><p>添加yum仓库</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#root执行</span><span class="token comment">#导入仓库密钥</span><span class="token function">rpm</span> <span class="token parameter variable">--import</span> https://artifacts.elastic.co/GPG-KEY-elasticsearch<span class="token comment">#添加yum源</span><span class="token comment">#编辑文件</span><span class="token function">vim</span> /etc/yum.repos.d/elasticsearch.repo<span class="token punctuation">[</span>elasticsearch-7.x<span class="token punctuation">]</span><span class="token assign-left variable">name</span><span class="token operator">=</span>Elasticsearch repository <span class="token keyword">for</span> <span class="token number">7</span>.x packages<span class="token assign-left variable">baseurl</span><span class="token operator">=</span>https://artifacts.elastic.co/packages/7.x/yum<span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">gpgkey</span><span class="token operator">=</span>https://artifacts.elastic.co/GPG-KEY-elasticsearch<span class="token assign-left variable">enabled</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">autorefresh</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">type</span><span class="token operator">=</span>rpm-md<span class="token comment"># 更新yum缓存</span>yum makecache<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>安装es</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> <span class="token parameter variable">-y</span> elasticsearch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>配置es</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/elasticsearch/elasticsearch.yml<span class="token comment"># 17行，设置集群名称</span>cluster.name: my-cluster<span class="token comment"># 23行，设置节点名称</span>node.name: node-1<span class="token comment"># 56行，允许外网访问</span>network.host: <span class="token number">0.0</span>.0.0<span class="token comment"># 74行，配置集群master节点</span>cluster.initial_master_nodes: <span class="token punctuation">[</span><span class="token string">"node-1"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>启动es</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl start <span class="token operator">|</span> stop <span class="token operator">|</span> status <span class="token operator">|</span> <span class="token builtin class-name">enable</span> <span class="token operator">|</span> disable elasticsearch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>关闭防火墙</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl stop firewalldsystemctl disable firewalld<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>验证</p><blockquote><p>浏览器打开：<a href="https://ip:9200/?pretty">https://ip:9200/?pretty</a></p></blockquote></li></ol><h2 id="集群化环境前置准备"><a href="#集群化环境前置准备" class="headerlink" title="集群化环境前置准备"></a>集群化环境前置准备</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><blockquote><p>在前面，我们所学习安装的软件，都是以单机模式运行的。</p><p>后续，我们将要学习大数据相关的软件部署，所以后续我们所安装的软件服务，大多数都是以集群化（多台服务器共同工作）模式运行的。</p><p>所以，在当前小节，我们需要完成集群化环境的前置准备，包括创建多台虚拟机，配置主机名映射，SSH免密登录等等。</p></blockquote><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><h4 id="配置多台Linux虚拟机"><a href="#配置多台Linux虚拟机" class="headerlink" title="配置多台Linux虚拟机"></a>配置多台Linux虚拟机</h4><blockquote><p>安装集群化软件，首要条件就是要有多台Linux服务器可用。</p><p>我们可以使用VMware提供的克隆功能，将我们的虚拟机额外克隆出3台来使用。</p></blockquote><ol><li><p>首先，关机当前CentOS系统虚拟机（可以使用root用户执行init 0来快速关机）</p></li><li><p>右键VMware虚拟机中的我的计算机点击新建文件夹，并起名为：虚拟机集群</p></li><li><p>右键目前已有的CentOS系统选中管理中的克隆</p><blockquote><ol><li>选择当前状态</li><li>创建完整克隆</li><li>定义名字</li></ol></blockquote></li><li><p>根据上边的操作克隆出林外两台</p></li><li><p>将克隆出来的虚拟机拉入创建好的文件夹中</p></li><li><p>开启第一台克隆，修改主机名为node1,并修改固定ip为：192.168.88.131</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#修改主机名</span>hostnamectl set-hostname node1<span class="token comment">#修改IP地址</span><span class="token function">vim</span> /etc/sysconfig/network-scripts/ifcfg-ens33<span class="token assign-left variable">IPADDR</span><span class="token operator">=</span><span class="token string">"192.168.88.131"</span><span class="token comment">#重启网卡</span>systemctl stop networksystemctl start network<span class="token comment">#或者直接</span>systemctl restart network<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>同样的操作启动node2和node3</p><blockquote><p>修改node2主机名为node2，设置IP为192.168.88.132</p><p>修改node2主机名为node3，设置IP为192.168.88.133</p></blockquote></li><li><p>配置FinalShell，配置连接到node1、node2、node3的连接</p></li></ol><blockquote><p>为了简单起见，加你配置root用户登录</p></blockquote><h4 id="配置主机名映射"><a href="#配置主机名映射" class="headerlink" title="配置主机名映射"></a>配置主机名映射</h4><ol><li><p>在Windows系统中修改hosts文件，填写如下内容</p><blockquote><p>如果使用的MacOS系统，请：</p><ol><li>sudo su -，切换到root</li><li>修改/etc/hosts文件</li></ol></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">192.168</span>.88.131 node1<span class="token number">192.168</span>.88.132 node2<span class="token number">192.168</span>.88.133 node3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>在3台Linux的/etc/hosts文件中，填写如下内容</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">192.168</span>.88.131 node1<span class="token number">192.168</span>.88.132 node2<span class="token number">192.168</span>.88.133 node3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="SSH免密登录"><a href="#SSH免密登录" class="headerlink" title="SSH免密登录"></a>SSH免密登录</h4><blockquote><p>SSH服务是一种用于远程登录的安全认证协议。</p><p>我们通过FinalShell远程连接到Linux，就是使用的SSH服务。</p><p>SSH服务支持：</p><ol><li>通过账户+密码的认证方式来做用户认证</li><li>通过账户+秘钥文件的方式做用户认证</li></ol><p>SSH可以让我们通过SSH命令，远程的登陆到其它的主机上，比如：</p><p>在node1执行：ssh root@node2，将以root用户登录node2服务器，输入密码即可成功登陆</p><p>或者ssh node2，将以当前用户直接登陆到node2服务器。</p></blockquote><h5 id="SSH免密配置"><a href="#SSH免密配置" class="headerlink" title="SSH免密配置"></a>SSH免密配置</h5><blockquote><p>后续安装的集群化软件，多数需要远程登录以及远程执行命令，我们可以简单起见，配置三台Linux服务器之间的免密码互相SSH登陆</p></blockquote><ol><li><p>在每台机器上都执行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#回车到底，相当于加锁配钥匙</span>ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-b</span> <span class="token number">4096</span><span class="token comment">#想当于将配的钥匙分给其他几台机器</span>ssh-copy-id node1ssh-copy-id node2ssh-copy-id node3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置JDK环境</p></li><li><p>关闭防火墙和SELinux</p><blockquote><p>集群化软件之间需要通过端口互相通讯，为了避免出现网络不通的问题，我们可以简单的在集群内部关闭防火墙。</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl stop firewalldsystemctl disable firewalld<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Linux有一个安全模块：SELinux，用以限制用户和程序的相关权限，来确保系统的安全稳定。</p><p>SELinux的配置同防火墙一样，非常复杂，课程中不多涉及，后续视情况可以出一章SELinux的配置课程。</p><p>在当前，我们只需要关闭SELinux功能，避免导致后面的软件运行出现问题即可，<mark>在每一台机器都执行</mark></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/sysconfig/selinux<span class="token comment"># 将第七行，SELINUX=enforcing 改为</span><span class="token assign-left variable">SELINUX</span><span class="token operator">=</span>disabled<span class="token comment"># 保存退出后，重启虚拟机即可，千万要注意disabled单词不要写错，不然无法启动系统</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>添加快照</p><blockquote><p>为了避免后续出现问题，在完成上述设置后，为<mark>每一台虚拟机</mark>都制作快照，留待使用。</p></blockquote></li></ol><h2 id="Zookeeper集群安装部署"><a href="#Zookeeper集群安装部署" class="headerlink" title="Zookeeper集群安装部署"></a>Zookeeper集群安装部署</h2><blockquote><p>ZooKeeper是一个<a href="https://baike.baidu.com/item/分布式/19276232?fromModule=lemma_inlink">分布式</a>的，开放源码的<a href="https://baike.baidu.com/item/分布式应用程序/9854429?fromModule=lemma_inlink">分布式应用程序</a>协调服务，是Hadoop和<a href="https://baike.baidu.com/item/Hbase/7670213?fromModule=lemma_inlink">Hbase</a>的重要组件。它是一个为分布式应用提供一致性服务的软件，提供的功能包括：配置维护、域名服务、分布式同步、组服务等。</p><p>除了为Hadoop和HBase提供协调服务外，Zookeeper也被其它许多软件采用作为其分布式状态一致性的依赖，比如Kafka，又或者一些软件项目中，也经常能见到Zookeeper作为一致性协调服务存在。</p><p>Zookeeper不论是大数据领域亦或是其它服务器开发领域，涉及到分布式状态一致性的场景，总有它的身影存在。</p></blockquote><h3 id="安装-7"><a href="#安装-7" class="headerlink" title="安装"></a>安装</h3><ol><li><p>【node1上操作】下载Zookeeper安装包，并解压</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 下载</span><span class="token function">wget</span> http://archive.apache.org/dist/zookeeper/zookeeper-3.5.9/apache-zookeeper-3.5.9-bin.tar.gz<span class="token comment"># 确保如下目录存在，不存在就创建</span><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /export/server<span class="token comment"># 解压</span><span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> apache-zookeeper-3.5.9-bin.tar.gz <span class="token parameter variable">-C</span> /export/server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>【node1上操作】创建软链接</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ln</span> <span class="token parameter variable">-s</span> /export/server/apache-zookeeper-3.5.9 /export/server/zookeeper<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>【node1上操作】修改配置文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#修改文件名</span><span class="token function">mv</span> /export/server/zookeeper/conf/zoo_sample.cfg /export/server/zookeeper/conf/zoo.cfg<span class="token comment">#编辑配置文件</span><span class="token function">vim</span> /export/server/zookeeper/conf/zoo.cfg<span class="token assign-left variable">tickTime</span><span class="token operator">=</span><span class="token number">2000</span><span class="token comment"># zookeeper数据存储目录</span><span class="token assign-left variable">dataDir</span><span class="token operator">=</span>/export/server/zookeeper/data<span class="token assign-left variable">clientPort</span><span class="token operator">=</span><span class="token number">2181</span><span class="token assign-left variable">initLimit</span><span class="token operator">=</span><span class="token number">5</span><span class="token assign-left variable">syncLimit</span><span class="token operator">=</span><span class="token number">2</span><span class="token assign-left variable">server.1</span><span class="token operator">=</span>node1:2888:3888<span class="token assign-left variable">server.2</span><span class="token operator">=</span>node2:2888:3888<span class="token assign-left variable">server.3</span><span class="token operator">=</span>node3:2888:3888<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>【node1上操作】配置<code>myid</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 1. 创建Zookeeper的数据目录</span><span class="token function">mkdir</span> /export/server/zookeeper/data<span class="token comment"># 2. 创建文件，并填入1</span><span class="token function">vim</span> /export/server/zookeeper/data/myid<span class="token comment"># 在文件内填入1即可</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>【在node2和node3上操作】，创建文件夹</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /export/server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>【node1上操作】将Zookeeper 复制到node2和node3</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /export/server<span class="token function">scp</span> <span class="token parameter variable">-r</span> apache-zookeeper-3.5.9 node2:<span class="token variable"><span class="token variable">`</span><span class="token builtin class-name">pwd</span><span class="token variable">`</span></span>/<span class="token function">scp</span> <span class="token parameter variable">-r</span> apache-zookeeper-3.5.9 node3:<span class="token variable"><span class="token variable">`</span><span class="token builtin class-name">pwd</span><span class="token variable">`</span></span>/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>【在node2上操作】</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 1. 创建软链接</span><span class="token function">ln</span> <span class="token parameter variable">-s</span> /export/server/apache-zookeeper-3.5.9 /export/server/zookeeper<span class="token comment"># 2. 修改myid文件</span><span class="token function">vim</span> /export/server/zookeeper/data/myid<span class="token comment"># 修改内容为2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>【在node3上操作】</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 1. 创建软链接</span><span class="token function">ln</span> <span class="token parameter variable">-s</span> /export/server/apache-zookeeper-3.5.9 /export/server/zookeeper<span class="token comment"># 2. 修改myid文件</span><span class="token function">vim</span> /export/server/zookeeper/data/myid<span class="token comment"># 修改内容为3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>【在node1、node2、node3上分别执行】启动Zookeeper</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 启动命令</span>/export/server/zookeeper/bin/zkServer.sh start<span class="token comment"># 启动Zookeeper</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>【在node1、node2、node3上分别执行】检查Zookeeper进程是否启动</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">jps<span class="token comment"># 结果中找到有：QuorumPeerMain 进程即可</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>【node1上操作】验证Zookeeper</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/export/server/zookeeper/bin/zkCli.sh<span class="token comment"># 进入到Zookeeper控制台中后，执行</span><span class="token function">ls</span> /<span class="token comment"># 如无报错即配置成功</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>至此Zookeeper安装完成</p><h2 id="Kafka集群安装部署"><a href="#Kafka集群安装部署" class="headerlink" title="Kafka集群安装部署"></a>Kafka集群安装部署</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Kafka是一款分布式的、去中心化的、高吞吐低延迟、订阅模式的消息队列系统。</p><p>同RabbitMQ一样，Kafka也是消息队列。不过RabbitMQ多用于后端系统，因其更加专注于消息的延迟和容错。</p><p>Kafka多用于大数据体系，因其更加专注于数据的吞吐能力。</p><p>Kafka多数都是运行在分布式（集群化）模式下，所以课程将以3台服务器，来完成Kafka集群的安装部署。</p><h3 id="安装-8"><a href="#安装-8" class="headerlink" title="安装"></a>安装</h3><ol><li><p>确保已经跟随前面的视频，安装并部署了JDK和Zookeeper服务</p><blockquote><p>Kafka的运行依赖JDK环境和Zookeeper请确保已经有了JDK环境和Zookeeper</p></blockquote></li><li><p>【在node1操作】下载并上传Kafka的安装包</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 下载安装包</span><span class="token function">wget</span> http://archive.apache.org/dist/kafka/2.4.1/kafka_2.12-2.4.1.tgz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>【在node1操作】解压</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /export/server<span class="token comment"># 此文件夹如果不存在需先创建</span><span class="token comment"># 解压</span><span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> kafka_2.12-2.4.1.tgz <span class="token parameter variable">-C</span> /export/server/<span class="token comment"># 创建软链接</span><span class="token function">ln</span> <span class="token parameter variable">-s</span> /export/server/kafka_2.12-2.4.1 /export/server/kafka<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>【在node1操作】修改Kafka目录内的config目录内的<code>server.properties</code>文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /export/server/kafka/config<span class="token comment"># 指定broker的id</span><span class="token assign-left variable">broker.id</span><span class="token operator">=</span><span class="token number">1</span><span class="token comment"># 指定 kafka的绑定监听的地址</span><span class="token assign-left variable">listeners</span><span class="token operator">=</span>PLAINTEXT://node1:9092<span class="token comment"># 指定Kafka数据的位置</span><span class="token assign-left variable">log.dirs</span><span class="token operator">=</span>/export/server/kafka/data<span class="token comment"># 指定Zookeeper的三个节点</span><span class="token assign-left variable">zookeeper.connect</span><span class="token operator">=</span>node1:2181,node2:2181,node3:2181<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>【在node1操作】将node1的kafka复制到node2和node3</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /export/server<span class="token comment"># 复制到node2同名文件夹</span><span class="token function">scp</span> <span class="token parameter variable">-r</span> kafka_2.12-2.4.1 node2:<span class="token variable"><span class="token variable">`</span><span class="token builtin class-name">pwd</span><span class="token variable">`</span></span>/<span class="token comment"># 复制到node3同名文件夹</span><span class="token function">scp</span> <span class="token parameter variable">-r</span> kafka_2.12-2.4.1 node3:<span class="token environment constant">$PWD</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>【在node2操作】</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建软链接</span><span class="token function">ln</span> <span class="token parameter variable">-s</span> /export/server/kafka_2.12-2.4.1 /export/server/kafka<span class="token builtin class-name">cd</span> /export/server/kafka/config<span class="token comment"># 指定broker的id</span><span class="token assign-left variable">broker.id</span><span class="token operator">=</span><span class="token number">2</span><span class="token comment"># 指定 kafka的绑定监听的地址</span><span class="token assign-left variable">listeners</span><span class="token operator">=</span>PLAINTEXT://node2:9092<span class="token comment"># 指定Kafka数据的位置</span><span class="token assign-left variable">log.dirs</span><span class="token operator">=</span>/export/server/kafka/data<span class="token comment"># 指定Zookeeper的三个节点</span><span class="token assign-left variable">zookeeper.connect</span><span class="token operator">=</span>node1:2181,node2:2181,node3:2181<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>【在node3操作】</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建软链接</span><span class="token function">ln</span> <span class="token parameter variable">-s</span> /export/server/kafka_2.12-2.4.1 /export/server/kafka<span class="token builtin class-name">cd</span> /export/server/kafka/config<span class="token comment"># 指定broker的id</span><span class="token assign-left variable">broker.id</span><span class="token operator">=</span><span class="token number">3</span><span class="token comment"># 指定 kafka的绑定监听的地址</span><span class="token assign-left variable">listeners</span><span class="token operator">=</span>PLAINTEXT://node3:9092<span class="token comment"># 指定Kafka数据的位置</span><span class="token assign-left variable">log.dirs</span><span class="token operator">=</span>/export/server/kafka/data<span class="token comment"># 指定Zookeeper的三个节点</span><span class="token assign-left variable">zookeeper.connect</span><span class="token operator">=</span>node1:2181,node2:2181,node3:2181<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>启动kafka</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 请先确保Zookeeper已经启动了</span><span class="token comment"># 方式1：【前台启动】分别在node1、2、3上执行如下语句</span>/export/server/kafka/bin/kafka-server-start.sh /export/server/kafka/config/server.properties<span class="token comment"># 方式2：【后台启动】分别在node1、2、3上执行如下语句</span><span class="token function">nohup</span> /export/server/kafka/bin/kafka-server-start.sh/export/server/kafka/config/server.properties <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">>></span> /export/server/kafka/kafka-server.log <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>验证Kafka启动</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 在每一台服务器执行</span>jps<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h3 id="测试Kafka能否正常使用"><a href="#测试Kafka能否正常使用" class="headerlink" title="测试Kafka能否正常使用"></a>测试Kafka能否正常使用</h3><ol><li>创建测试主题</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 在node1执行，创建一个主题</span>/export/server/kafka_2.12-2.4.1/bin/kafka-topics.sh <span class="token parameter variable">--create</span> <span class="token parameter variable">--zookeeper</span> node1:2181 --replication-factor <span class="token number">1</span> <span class="token parameter variable">--partitions</span> <span class="token number">3</span> <span class="token parameter variable">--topic</span> <span class="token builtin class-name">test</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol><li>运行测试，请在FinalShell中打开2个node1的终端页面</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 打开一个终端页面，启动一个模拟的数据生产者</span>/export/server/kafka_2.12-2.4.1/bin/kafka-console-producer.sh --broker-list node1:9092 <span class="token parameter variable">--topic</span> <span class="token builtin class-name">test</span><span class="token comment"># 再打开一个新的终端页面，在启动一个模拟的数据消费者</span>/export/server/kafka_2.12-2.4.1/bin/kafka-console-consumer.sh --bootstrap-server node1:9092 <span class="token parameter variable">--topic</span> <span class="token builtin class-name">test</span> --from-beginning<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">Linux</summary>
    
    
    
    <category term="技术" scheme="https://love.moyanruruo.top/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Linux" scheme="https://love.moyanruruo.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>搭建PicGo+Gitee+typora图床</title>
    <link href="https://love.moyanruruo.top/posts/4c53959b.html"/>
    <id>https://love.moyanruruo.top/posts/4c53959b.html</id>
    <published>2024-02-22T18:23:54.000Z</published>
    <updated>2024-03-13T15:35:38.030Z</updated>
    
    <content type="html"><![CDATA[<h1 id="搭建PicGo-Gitee-typora图床"><a href="#搭建PicGo-Gitee-typora图床" class="headerlink" title="搭建PicGo+Gitee+typora图床"></a>搭建PicGo+Gitee+typora图床</h1><blockquote><p>使用gitee+picgo+typora搭建图床</p><p>注意：以此搭建的图床是公开的，也就是说其他人可以通过查看你公开的代码仓库查看图片，自用用来记录自己的学习笔记可以使用</p></blockquote><h2 id="1-创建gitee图床仓库"><a href="#1-创建gitee图床仓库" class="headerlink" title="1. 创建gitee图床仓库"></a>1. 创建gitee图床仓库</h2><blockquote><p>提前准备：</p><p>gitee账号（gitee网址：www.gitee.com）</p></blockquote><ol><li>新建仓库</li></ol><p><img src="https://cdn.jsdelivr.net/gh/chenxiancen/ImgPicGo/blogimg/1.png" alt="image-20240222135400191"></p><ol><li>新建仓库进行如下配置</li></ol><p><img src="https://cdn.jsdelivr.net/gh/chenxiancen/ImgPicGo/blogimg/5.png" alt="image-20240222140000751"></p><ol><li>创建成功界面如下图所示，并初始化readme文件</li></ol><p><img src="https://cdn.jsdelivr.net/gh/chenxiancen/ImgPicGo/blogimg/2.png" alt="image-20240222140223533"></p><ol><li>设置私人令牌</li></ol><p><img src="https://cdn.jsdelivr.net/gh/chenxiancen/ImgPicGo/blogimg/4.png" alt="image-20240222141043163"></p><p><img src="https://cdn.jsdelivr.net/gh/chenxiancen/ImgPicGo/blogimg/3.png" alt="image-20240222141227063"></p><ul><li>选中全选进行提交，会验证密码</li></ul><p><img src="https://cdn.jsdelivr.net/gh/chenxiancen/ImgPicGo/blogimg/6.png" alt="image-20240222143404182"></p><ul><li><p>提交后会生成一个token，复制保存</p><blockquote><p>后续配置PicGo时需要使用，一定要保存，因为只有第一次可以看到明文的token</p></blockquote></li></ul><p><img src="https://cdn.jsdelivr.net/gh/chenxiancen/ImgPicGo/blogimg/8.png" alt="image-20240222144028511"></p><p>5.私人令牌配置好的界面如下图所示</p><p><img src="https://cdn.jsdelivr.net/gh/chenxiancen/ImgPicGo/blogimg/9.png" alt="image-20240222144310123"></p><h2 id="2-下载安装PicGo"><a href="#2-下载安装PicGo" class="headerlink" title="2.下载安装PicGo"></a>2.下载安装PicGo</h2><blockquote><p>提前准备：node.js</p><p>node.js下载地址：<a href="https://nodejs.org/en">https://nodejs.org/en</a></p><p>建议下载左侧长期维护版本</p></blockquote><ul><li><p>下载安装node.js</p><ol><li><p>node.js下载</p><p><img src="https://cdn.jsdelivr.net/gh/chenxiancen/ImgPicGo/blogimg/10.png" alt="image-20240222151256381"></p></li><li><p>下载完成后傻瓜式安装所有选项默认即可</p></li><li><p>安装完成后在cmd中使用如下命令进行验证</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#验证命令</span><span class="token function">node</span> <span class="token parameter variable">--version</span><span class="token function">npm</span> <span class="token parameter variable">-version</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>验证结果如下</p><p><img src="https://cdn.jsdelivr.net/gh/chenxiancen/ImgPicGo/blogimg/11.png" alt="image-20240222151909540"></p><blockquote><p>如果没有显示如上结果，可以检查一下环境变量是否配置</p><p><img src="https://cdn.jsdelivr.net/gh/chenxiancen/ImgPicGo/blogimg/12.png" alt="image-20240222154855103"></p></blockquote></li><li><p>node.js优化配置</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#配置淘宝镜像源</span><span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npmmirror.com<span class="token comment">#配置全局仓库地址（在本地创建node_global文件夹用来作为全局仓库，文件夹位置按照自己想要存放的位置来就可以）</span><span class="token function">npm</span> config <span class="token builtin class-name">set</span> prefix node_global地址<span class="token comment">#配置全局缓存地址（在本地创建node_cache文件夹用来作为全局缓存，文件夹位置按照自己想要存放的位置来就可以）</span><span class="token function">npm</span> config <span class="token builtin class-name">set</span> cache node_cache地址<span class="token comment">#查看配置</span><span class="token function">npm</span> config <span class="token function">ls</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我的配置如下图所示</p><p><img src="https://cdn.jsdelivr.net/gh/chenxiancen/ImgPicGo/blogimg/13.png" alt="image-20240222153850756"></p></li></ol></li><li><p>下载安装PicGo</p></li></ul><ol><li><p>下载安装</p><blockquote><p>PicGo下载地址：<a href="https://github.com/Molunerfinn/PicGo/releases">https://github.com/Molunerfinn/PicGo/releases</a></p><p>下载完成后按步骤默认安装即可，安装路径根据自己需要更改</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/chenxiancen/ImgPicGo/blogimg/14.png" alt="image-20240222155412883"></p><p>安装完成打开界面如下</p><p><img src="https://cdn.jsdelivr.net/gh/chenxiancen/ImgPicGo/blogimg/15.png" alt="image-20240222155935690"></p></li><li><p>基础配置</p><ul><li><p>配置镜像地址</p><blockquote><p>配置镜像地址主要是为之后插件下载提供帮助，默认的镜像地址容易出现插件下载不下来的问题，因此提前配置淘宝镜像下载地址</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/chenxiancen/ImgPicGo/blogimg/16.png" alt="image-20240222160651746"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#配置淘宝镜像</span>https://registry.npmmirror.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/chenxiancen/ImgPicGo/blogimg/17.png" alt="image-20240222161025952"></p></li><li><p>配置Server</p><p><img src="https://cdn.jsdelivr.net/gh/chenxiancen/ImgPicGo/blogimg/18.png" alt="image-20240222161440333"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#设置监听地址</span><span class="token number">127.0</span>.0.1<span class="token comment">#设置监听端口</span><span class="token number">36677</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/chenxiancen/ImgPicGo/blogimg/19.png" alt="image-20240222161703266"></p></li><li><p>其他设置</p><p><img src="https://cdn.jsdelivr.net/gh/chenxiancen/ImgPicGo/blogimg/27.png" alt="image-20240222162154384"></p></li></ul></li><li><p>插件下载以及配置</p><ul><li><p>插件下载</p><p><img src="https://cdn.jsdelivr.net/gh/chenxiancen/ImgPicGo/blogimg/20.png" alt="image-20240222162559936"></p></li><li><p>插件配置</p><p><img src="https://cdn.jsdelivr.net/gh/chenxiancen/ImgPicGo/blogimg/21.png" alt="image-20240222163537755"></p></li></ul></li></ol><pre><code> &gt; repo：填写gitee仓库名 &gt; branch:图片上传的分支（新建的仓库默认分支为master） &gt; token：填写gitee配置的私人令牌（token） &gt; path:填写保存到仓库中的位置（此处我创建了一个img文件夹用来专门保存） &gt;</code></pre><blockquote><p><img src="https://cdn.jsdelivr.net/gh/chenxiancen/ImgPicGo/blogimg/202402270224906.png" alt="202402252036909"></p></blockquote><ol><li><p>图床设置</p><blockquote><p>一般来说在插件配置完成后此处会同步更新</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/chenxiancen/ImgPicGo/blogimg/22.png" alt="image-20240222165024712"></p></li><li><p>上传区设置</p><p><img src="https://cdn.jsdelivr.net/gh/chenxiancen/ImgPicGo/blogimg/23.png" alt="image-20240222165605957"></p></li></ol><h2 id="3-下载安装typora"><a href="#3-下载安装typora" class="headerlink" title="3.下载安装typora"></a>3.下载安装typora</h2><ul><li><p>下载安装Typora</p><blockquote><p>下载地址：<a href="https://typoraio.cn/">Typora 官方中文站 (typoraio.cn)</a></p><p>注意：Typora是用来编辑Markdown文档的软件，1.0以后的版本是收费的，如果有需要可以找一下1.0之前的版本但是版本最好控制在<strong>0.9.96</strong>及以上的版本</p><p>安装也是傻瓜式安装，一路点击下一步有需要可以切换一下安装路径</p></blockquote></li><li><p>配置PicGo上传</p><p><img src="https://cdn.jsdelivr.net/gh/chenxiancen/ImgPicGo/blogimg/24.png" alt="image-20240222171001238"></p><blockquote><p>设置图像模块下的上传服务设定</p><p>上传服务：选择PicGo(app)</p><p>PicGo路径：填写自己电脑上PicGo的安装路径（不要填写图片上的路径，图片路径为我自己软件安装路径）</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/chenxiancen/ImgPicGo/blogimg/25.png" alt="image-20240222171528456"></p></li><li><p>验证成功结果</p><p><img src="https://cdn.jsdelivr.net/gh/chenxiancen/ImgPicGo/blogimg/26.png" alt="上传成功图片"></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;搭建PicGo-Gitee-typora图床&quot;&gt;&lt;a href=&quot;#搭建PicGo-Gitee-typora图床&quot; class=&quot;headerlink&quot; title=&quot;搭建PicGo+Gitee+typora图床&quot;&gt;&lt;/a&gt;搭建PicGo+Gitee+typora</summary>
      
    
    
    
    <category term="技术" scheme="https://love.moyanruruo.top/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>日常生活</title>
    <link href="https://love.moyanruruo.top/posts/be99bbe6.html"/>
    <id>https://love.moyanruruo.top/posts/be99bbe6.html</id>
    <published>2024-02-22T18:23:54.000Z</published>
    <updated>2024-03-13T15:35:38.030Z</updated>
    
    <content type="html"><![CDATA[<a class="tag-Link" target="_blank" href="https://blog.anheyu.com/">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://api.iowen.cn/favicon/blog.anheyu.com/.png);"></div>        <div class="tag-link-right">            <div class="tag-link-title">安知鱼博客</div>            <div class="tag-link-sitename">安知鱼</div>        </div>        <i class="fa-solid fa-angle-right"></i>    </div>    </a>]]></content>
    
    
    <summary type="html">日常生活</summary>
    
    
    
    <category term="日常" scheme="https://love.moyanruruo.top/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
  </entry>
  
</feed>
